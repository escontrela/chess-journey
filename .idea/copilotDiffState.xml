<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/NombreDeTuClase.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/NombreDeTuClase.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db/quotes.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db/quotes.sql" />
              <option name="updatedContent" value="CREATE TABLE IF NOT EXISTS quotes (&#10;    id SERIAL PRIMARY KEY,&#10;    text VARCHAR(500) NOT NULL,&#10;    author VARCHAR(100) NOT NULL&#10;);&#10;&#10;-- Insertar algunas quotes iniciales&#10;INSERT INTO quotes (text, author) VALUES &#10;('Some people think that if their opponent plays a beautiful game, it''s okay to lose. I don''t. You have to be merciless.', 'Magnus Carlsen'),&#10;('Chess is life in miniature. Chess is struggle, chess is battles.', 'Garry Kasparov'),&#10;('Every chess master was once a beginner.', 'Irving Chernev'),&#10;('Chess is the gymnasium of the mind.', 'Blaise Pascal'),&#10;('When you see a good move, look for a better one.', 'Emanuel Lasker');" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ActiveUserApiController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ActiveUserApiController.java" />
              <option name="updatedContent" value="package com.davidp.chessjourney.api;&#10;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import io.javalin.Javalin;&#10;import io.javalin.http.Context;&#10;&#10;public class ActiveUserApiController {&#10;    private final GetUserByIdUseCase getUserByIdUseCase;&#10;&#10;    public ActiveUserApiController(GetUserByIdUseCase getUserByIdUseCase) {&#10;        this.getUserByIdUseCase = getUserByIdUseCase;&#10;    }&#10;&#10;    public void registerRoutes(Javalin app) {&#10;        app.get(&quot;/chessjourney/activeUser&quot;, this::getActiveUser);&#10;    }&#10;&#10;    private void getActiveUser(Context ctx) {&#10;        long activeUserId = AppProperties.getInstance().getActiveUserId();&#10;        User user = getUserByIdUseCase.execute(activeUserId);&#10;        if (user == null) {&#10;            ctx.status(404).result(&quot;No active user found&quot;);&#10;            return;&#10;        }&#10;        ctx.json(new UserResponse(user));&#10;    }&#10;&#10;    public static class UserResponse {&#10;        public long id;&#10;        public String firstname;&#10;        public String lastname;&#10;        public String email;&#10;        public String initials;&#10;&#10;        public UserResponse(User user) {&#10;            this.id = user.getId();&#10;            this.firstname = user.getFirstname();&#10;            this.lastname = user.getLastname();&#10;            this.email = user.getEmail();&#10;            this.initials = user.getInitials();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ApiConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ApiConfig.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.api;&#10;&#10;import io.javalin.Javalin;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;&#10;public class ApiConfig {&#10;&#10;    private static volatile ApiConfig instance = null;&#10;&#10;    private final Javalin app;&#10;&#10;    private ApiConfig() {&#10;&#10;        this.app = Javalin.create();&#10;        configureRoutes();&#10;    }&#10;&#10;    public static ApiConfig getInstance() {&#10;&#10;        if (instance == null) {&#10;            synchronized (ApiConfig.class) {&#10;                if (instance == null) {&#10;&#10;                    instance = new ApiConfig();&#10;                }&#10;            }&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private void configureRoutes() {&#10;&#10;        QuoteController quoteController = new QuoteController(UseCaseFactory.createSaveQuoteUseCase());&#10;&#10;        ActiveUserController activeUserController = new ActiveUserController(UseCaseFactory.createGetUserByIdUseCase());&#10;&#10;        app.post(&quot;/chessjourney/quote&quot;, quoteController.saveQuote);&#10;        app.get(&quot;/chessjourney/activeUser&quot;, activeUserController.getActiveUser);&#10;&#10;    }&#10;&#10;    public void start(int port) {&#10;&#10;        app.start(port);&#10;    }&#10;&#10;    public void stop() {&#10;&#10;        app.stop();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.davidp.chessjourney.api;&#10;&#10;import io.javalin.Javalin;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.application.usecases.SaveQuoteUseCase;&#10;&#10;public class ApiConfig {&#10;&#10;    private static volatile ApiConfig instance = null;&#10;&#10;    private final Javalin app;&#10;    private final QuoteController quoteController;&#10;    private final ActiveUserController activeUserController;&#10;&#10;    private ApiConfig(SaveQuoteUseCase saveQuoteUseCase, GetUserByIdUseCase getUserByIdUseCase) {&#10;        this.app = Javalin.create();&#10;        this.quoteController = new QuoteController(saveQuoteUseCase);&#10;        this.activeUserController = new ActiveUserController(getUserByIdUseCase);&#10;        configureRoutes();&#10;    }&#10;&#10;    public static ApiConfig getInstance() {&#10;        if (instance == null) {&#10;            synchronized (ApiConfig.class) {&#10;                if (instance == null) {&#10;                    SaveQuoteUseCase saveQuoteUseCase = UseCaseFactory.createSaveQuoteUseCase();&#10;                    GetUserByIdUseCase getUserByIdUseCase = UseCaseFactory.createGetUserByIdUseCase();&#10;                    instance = new ApiConfig(saveQuoteUseCase, getUserByIdUseCase);&#10;                }&#10;            }&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private void configureRoutes() {&#10;        app.post(&quot;/chessjourney/quote&quot;, quoteController.saveQuote);&#10;        app.get(&quot;/chessjourney/activeUser&quot;, activeUserController.getActiveUser);&#10;    }&#10;&#10;    public void start(int port) {&#10;        app.start(port);&#10;    }&#10;&#10;    public void stop() {&#10;        app.stop();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/QuoteController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/QuoteController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.api;&#10;&#10;import com.davidp.chessjourney.application.usecases.SaveQuoteUseCase;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import io.javalin.http.Handler;&#10;&#10;public class QuoteController {&#10;&#10;    private SaveQuoteUseCase saveQuoteUseCase = null;&#10;&#10;    public QuoteController(SaveQuoteUseCase saveQuoteUseCase) {&#10;&#10;        this.saveQuoteUseCase = saveQuoteUseCase;&#10;    }&#10;&#10;    public Handler saveQuote = ctx -&gt; {&#10;&#10;        QuoteRequest request = ctx.bodyAsClass(QuoteRequest.class);&#10;        Quote savedQuote = saveQuoteUseCase.execute(request.text, request.author);&#10;        ctx.json(savedQuote);&#10;    };&#10;&#10;    private static class QuoteRequest {&#10;&#10;        public String text;&#10;        public String author;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.api;&#10;&#10;import com.davidp.chessjourney.application.usecases.SaveQuoteUseCase;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import io.javalin.http.Handler;&#10;&#10;/**&#10; * Controlador encargado de gestionar las operaciones relacionadas con las citas (quotes).&#10; * Expone el endpoint para guardar una cita utilizando el caso de uso correspondiente.&#10; */&#10;public class QuoteController {&#10;&#10;    private SaveQuoteUseCase saveQuoteUseCase = null;&#10;&#10;    public QuoteController(SaveQuoteUseCase saveQuoteUseCase) {&#10;&#10;        this.saveQuoteUseCase = saveQuoteUseCase;&#10;    }&#10;&#10;    public Handler saveQuote = ctx -&gt; {&#10;&#10;        QuoteRequest request = ctx.bodyAsClass(QuoteRequest.class);&#10;        Quote savedQuote = saveQuoteUseCase.execute(request.text, request.author);&#10;        ctx.json(savedQuote);&#10;    };&#10;&#10;    private static class QuoteRequest {&#10;&#10;        public String text;&#10;        public String author;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil {&#10;    private final EnumMap&lt;Enum&lt;?&gt;, AudioClip&gt; soundCache = new EnumMap&lt;&gt;(Enum.class);&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public &lt;E extends Enum&lt;E&gt;&gt; void preloadSounds(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(Enum&lt;?&gt; type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;E&gt; {&#10;        String getResourceName(E type);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil&lt;E extends Enum&lt;E&gt;&gt; {&#10;    private final EnumMap&lt;E, AudioClip&gt; soundCache;&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public JavaFXSoundUtil(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        soundCache = new EnumMap&lt;&gt;(enumClass);&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(E type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;T&gt; {&#10;        String getResourceName(T type);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil();&#10;    soundUtil.preloadSounds(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil&lt;SoundType&gt; soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil&lt;&gt;(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/usecases/GetRandomQuoteUseCase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/usecases/GetRandomQuoteUseCase.java" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.usecases;&#10;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import com.davidp.chessjourney.domain.QuoteRepository;&#10;&#10;public class GetRandomQuoteUseCase {&#10;    private final QuoteRepository quoteRepository;&#10;&#10;    public GetRandomQuoteUseCase(QuoteRepository quoteRepository) {&#10;        this.quoteRepository = quoteRepository;&#10;    }&#10;&#10;    public Quote execute() {&#10;        return quoteRepository.getRandomQuote()&#10;                .orElse(new Quote(&quot;Chess is imagination&quot;, &quot;Anonymous&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/usecases/SaveQuoteUseCase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/usecases/SaveQuoteUseCase.java" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.usecases;&#10;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import com.davidp.chessjourney.domain.QuoteRepository;&#10;&#10;public class SaveQuoteUseCase {&#10;    private final QuoteRepository quoteRepository;&#10;&#10;    public SaveQuoteUseCase(QuoteRepository quoteRepository) {&#10;        this.quoteRepository = quoteRepository;&#10;    }&#10;&#10;    public Quote execute(String text, String author) {&#10;        Quote quote = new Quote(text, author);&#10;        return quoteRepository.save(quote);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/domain/QuoteRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/domain/QuoteRepository.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.domain;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repository interface for managing Quote entities.&#10; * Provides methods to save a quote, retrieve a random quote, and get all quotes.&#10; */&#10;public interface QuoteRepository {&#10;&#10;  Quote save(Quote quote);&#10;&#10;  Optional&lt;Quote&gt; getRandomQuote();&#10;&#10;  List&lt;Quote&gt; getAllQuotes();&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.domain;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repository interface for managing Quote entities.&#10; * Provides methods to save a quote, retrieve a random quote, and get all quotes.&#10; */&#10;public interface QuoteRepository {&#10;&#10;  /**&#10;   * Saves a quote entity to the repository.&#10;   *&#10;   * @param quote the Quote to be saved&#10;   * @return the saved Quote entity&#10;   */&#10;  Quote save(Quote quote);&#10;&#10;  /**&#10;   * Retrieves a random quote from the repository.&#10;   *&#10;   * @return an Optional containing a random Quote, or empty if none exist&#10;   */&#10;  Optional&lt;Quote&gt; getRandomQuote();&#10;&#10;  /**&#10;   * Retrieves all quotes from the repository.&#10;   *&#10;   * @return a list of all Quote entities&#10;   */&#10;  List&lt;Quote&gt; getAllQuotes();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
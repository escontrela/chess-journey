<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ActiveUserApiController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ActiveUserApiController.java" />
              <option name="updatedContent" value="package com.davidp.chessjourney.api;&#10;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import io.javalin.Javalin;&#10;import io.javalin.http.Context;&#10;&#10;public class ActiveUserApiController {&#10;    private final GetUserByIdUseCase getUserByIdUseCase;&#10;&#10;    public ActiveUserApiController(GetUserByIdUseCase getUserByIdUseCase) {&#10;        this.getUserByIdUseCase = getUserByIdUseCase;&#10;    }&#10;&#10;    public void registerRoutes(Javalin app) {&#10;        app.get(&quot;/chessjourney/activeUser&quot;, this::getActiveUser);&#10;    }&#10;&#10;    private void getActiveUser(Context ctx) {&#10;        long activeUserId = AppProperties.getInstance().getActiveUserId();&#10;        User user = getUserByIdUseCase.execute(activeUserId);&#10;        if (user == null) {&#10;            ctx.status(404).result(&quot;No active user found&quot;);&#10;            return;&#10;        }&#10;        ctx.json(new UserResponse(user));&#10;    }&#10;&#10;    public static class UserResponse {&#10;        public long id;&#10;        public String firstname;&#10;        public String lastname;&#10;        public String email;&#10;        public String initials;&#10;&#10;        public UserResponse(User user) {&#10;            this.id = user.getId();&#10;            this.firstname = user.getFirstname();&#10;            this.lastname = user.getLastname();&#10;            this.email = user.getEmail();&#10;            this.initials = user.getInitials();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil {&#10;    private final EnumMap&lt;Enum&lt;?&gt;, AudioClip&gt; soundCache = new EnumMap&lt;&gt;(Enum.class);&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public &lt;E extends Enum&lt;E&gt;&gt; void preloadSounds(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(Enum&lt;?&gt; type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;E&gt; {&#10;        String getResourceName(E type);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil&lt;E extends Enum&lt;E&gt;&gt; {&#10;    private final EnumMap&lt;E, AudioClip&gt; soundCache;&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public JavaFXSoundUtil(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        soundCache = new EnumMap&lt;&gt;(enumClass);&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(E type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;T&gt; {&#10;        String getResourceName(T type);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil();&#10;    soundUtil.preloadSounds(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil&lt;SoundType&gt; soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil&lt;&gt;(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
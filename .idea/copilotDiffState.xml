<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil {&#10;    private final EnumMap&lt;Enum&lt;?&gt;, AudioClip&gt; soundCache = new EnumMap&lt;&gt;(Enum.class);&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public &lt;E extends Enum&lt;E&gt;&gt; void preloadSounds(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(Enum&lt;?&gt; type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;E&gt; {&#10;        String getResourceName(E type);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil&lt;E extends Enum&lt;E&gt;&gt; {&#10;    private final EnumMap&lt;E, AudioClip&gt; soundCache;&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public JavaFXSoundUtil(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        soundCache = new EnumMap&lt;&gt;(enumClass);&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(E type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;T&gt; {&#10;        String getResourceName(T type);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil();&#10;    soundUtil.preloadSounds(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil&lt;SoundType&gt; soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil&lt;&gt;(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/controls/SelectableCardController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/controls/SelectableCardController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.ui.controls;&#10;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.collections.ListChangeListener;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.Pane;&#10;import javafx.scene.layout.VBox;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class SelectableCardController extends Pane {&#10;    @FXML private Pane rootPane;&#10;    @FXML private ImageView imgIcon;&#10;    @FXML private Label lblTitle;&#10;    @FXML private VBox subtitlesBox;&#10;&#10;    private boolean selected = false;&#10;&#10;    public SelectableCardController() {&#10;&#10;        System.out.println(&quot;Cargando FXML: /com/davidp/chessjourney/selectable-card.fxml&quot;);&#10;        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(&quot;/com/davidp/chessjourney/selectable-card.fxml&quot;));&#10;        fxmlLoader.setRoot(this);&#10;        fxmlLoader.setController(this);&#10;&#10;        subtitles.addListener((ListChangeListener&lt;String&gt;) change -&gt; updateSubtitles());&#10;&#10;        try {&#10;&#10;            fxmlLoader.load();&#10;&#10;        } catch (IOException e) {&#10;&#10;            throw new RuntimeException(&quot;No se pudo cargar el FXML: /com/davidp/chessjourney/selectable-card.fxml&quot;, e);&#10;        }&#10;        this.addEventHandler(MouseEvent.MOUSE_CLICKED, this::onCardClicked);&#10;    }&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        updateSubtitles();&#10;    }&#10;&#10;    public void setImage(Image image) {&#10;        imgIcon.setImage(image);&#10;    }&#10;&#10;    public void setImageUrl(String url) {&#10;        imgIcon.setImage(new Image(url));&#10;    }&#10;    public String getImageUrl() {&#10;&#10;        return imgIcon.getImage() != null ? imgIcon.getImage().getUrl() : null;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        System.out.println(&quot;Setting title: &quot; + title);&#10;        lblTitle.setText(title);&#10;    }&#10;&#10;    public void setSubtitles(List&lt;String&gt; subtitles) {&#10;        this.subtitles.clear();&#10;        this.subtitles.addAll(subtitles);&#10;        updateSubtitles();&#10;    }&#10;&#10;    private final ObservableList&lt;String&gt; subtitles = FXCollections.observableArrayList();&#10;&#10;    public ObservableList&lt;String&gt; getSubtitles() {&#10;        return subtitles;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return lblTitle.getText();&#10;    }&#10;&#10;    public boolean isSelected() {&#10;        return selected;&#10;    }&#10;&#10;    private void updateSubtitles() {&#10;        subtitlesBox.getChildren().clear();&#10;        for (String subtitle : subtitles) {&#10;            Label label = new Label(subtitle);&#10;            label.getStyleClass().add(&quot;selectable-card-subtitle&quot;);&#10;            subtitlesBox.getChildren().add(label);&#10;        }&#10;    }&#10;&#10;    private CardClickListener cardClickListener;&#10;&#10;    public interface CardClickListener {&#10;        void onCardClicked(SelectableCardController card);&#10;    }&#10;&#10;    public void setCardClickListener(CardClickListener listener) {&#10;        this.cardClickListener = listener;&#10;    }&#10;&#10;        if (cardClickListener != null) {&#10;            cardClickListener.onCardClicked(this);&#10;        }&#10;&#10;        System.out.println(&quot;Card clicked: &quot; + getTitle() + &quot;, selected: &quot; + this.getUserData());&#10;        selected = !selected;&#10;        this.pseudoClassStateChanged(javafx.css.PseudoClass.getPseudoClass(&quot;selected&quot;), selected);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.ui.controls;&#10;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.collections.ListChangeListener;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.Pane;&#10;import javafx.scene.layout.VBox;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class SelectableCardController extends Pane {&#10;    @FXML private Pane rootPane;&#10;    @FXML private ImageView imgIcon;&#10;    @FXML private Label lblTitle;&#10;    @FXML private VBox subtitlesBox;&#10;&#10;    private boolean selected = false;&#10;&#10;    public SelectableCardController() {&#10;&#10;        System.out.println(&quot;Cargando FXML: /com/davidp/chessjourney/selectable-card.fxml&quot;);&#10;        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(&quot;/com/davidp/chessjourney/selectable-card.fxml&quot;));&#10;        fxmlLoader.setRoot(this);&#10;        fxmlLoader.setController(this);&#10;&#10;        subtitles.addListener((ListChangeListener&lt;String&gt;) change -&gt; updateSubtitles());&#10;&#10;        try {&#10;&#10;            fxmlLoader.load();&#10;&#10;        } catch (IOException e) {&#10;&#10;            throw new RuntimeException(&quot;No se pudo cargar el FXML: /com/davidp/chessjourney/selectable-card.fxml&quot;, e);&#10;        }&#10;        this.addEventHandler(MouseEvent.MOUSE_CLICKED, this::onCardClicked);&#10;    }&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        updateSubtitles();&#10;    }&#10;&#10;    public void setImage(Image image) {&#10;        imgIcon.setImage(image);&#10;    }&#10;&#10;    public void setImageUrl(String url) {&#10;        imgIcon.setImage(new Image(url));&#10;    }&#10;    public String getImageUrl() {&#10;&#10;        return imgIcon.getImage() != null ? imgIcon.getImage().getUrl() : null;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        System.out.println(&quot;Setting title: &quot; + title);&#10;        lblTitle.setText(title);&#10;    }&#10;&#10;    public void setSubtitles(List&lt;String&gt; subtitles) {&#10;        this.subtitles.clear();&#10;        this.subtitles.addAll(subtitles);&#10;        updateSubtitles();&#10;    }&#10;&#10;    private final ObservableList&lt;String&gt; subtitles = FXCollections.observableArrayList();&#10;&#10;    public ObservableList&lt;String&gt; getSubtitles() {&#10;        return subtitles;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return lblTitle.getText();&#10;    }&#10;&#10;    public boolean isSelected() {&#10;        return selected;&#10;    }&#10;&#10;    private void updateSubtitles() {&#10;        subtitlesBox.getChildren().clear();&#10;        for (String subtitle : subtitles) {&#10;            Label label = new Label(subtitle);&#10;            label.getStyleClass().add(&quot;selectable-card-subtitle&quot;);&#10;            subtitlesBox.getChildren().add(label);&#10;        }&#10;    }&#10;&#10;    private void onCardClicked(MouseEvent event) {&#10;        if (cardClickListener != null) {&#10;            cardClickListener.onCardClicked(this);&#10;        }&#10;        System.out.println(&quot;Card clicked: &quot; + getTitle() + &quot;, selected: &quot; + this.getUserData());&#10;        selected = !selected;&#10;        this.pseudoClassStateChanged(javafx.css.PseudoClass.getPseudoClass(&quot;selected&quot;), selected);&#10;    }&#10;&#10;    private CardClickListener cardClickListener;&#10;&#10;    public interface CardClickListener {&#10;        void onCardClicked(SelectableCardController card);&#10;    }&#10;&#10;    public void setCardClickListener(CardClickListener listener) {&#10;        this.cardClickListener = listener;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/user/UserViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/user/UserViewController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.ui.user;&#10;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.config.GlobalEventBus;&#10;import com.davidp.chessjourney.application.domain.*;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.board.PromoteViewInputScreenData;&#10;import com.davidp.chessjourney.application.ui.controls.SelectableCardController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import com.davidp.chessjourney.application.usecases.GetUsersUseCase;&#10;import com.davidp.chessjourney.application.usecases.SaveActiveUserUseCase;&#10;import com.davidp.chessjourney.application.util.JavaFXAnimationUtil;&#10;import com.davidp.chessjourney.domain.User;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import javafx.animation.PauseTransition;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.FlowPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.Pane;&#10;import javafx.util.Duration;&#10;&#10;public class UserViewController implements ScreenController {&#10;&#10;  private GetUsersUseCase getUsersUseCase;&#10;  private SaveActiveUserUseCase saveUserUseCase;&#10;&#10;  private ScreenStatus status;&#10;&#10;  private PromoteViewInputScreenData promoteViewInputScreenData;&#10;&#10;  @FXML private Button btClose;&#10;&#10;  @FXML private ImageView imgClose;&#10;&#10;  @FXML private Pane rootPane;&#10;&#10;&#10;  @FXML&#10;  private FlowPane usersFlowPanel;&#10;&#10;  public void initialize() {&#10;&#10;    status = ScreenStatus.INITIALIZED;&#10;  }&#10;&#10;  @Override&#10;  public void setData(InputScreenData inputData) {&#10;&#10;    if (inputData.isLayoutInfoValid()) {&#10;&#10;      setLayout(inputData.getLayoutX(), inputData.getLayoutY());&#10;    }&#10;&#10;    List&lt;User&gt; users = getUsersUseCase.execute();&#10;    long activeUserId = AppProperties.getInstance().getActiveUserId();&#10;    showUsersWithAnimation(users,activeUserId);&#10;  }&#10;&#10;  private void showUsersWithAnimation(List&lt;User&gt; users, long activeUserId) {&#10;&#10;    usersFlowPanel.getChildren().clear(); // Limpia la lista antes de mostrar nuevos usuarios&#10;&#10;    usersFlowPanel.setHgap(20);  // espacio horizontal entre tarjetas&#10;    usersFlowPanel.setVgap(20);  // espacio vertical entre filas&#10;    usersFlowPanel.setPrefWrapLength(400); // ancho máximo antes de crear una nueva fila&#10;&#10;      for (int i = 0; i &lt; users.size(); i++) {&#10;&#10;        User user = users.get(i);&#10;&#10;        SelectableCardController userPane = createUserPane(user, activeUserId);&#10;&#10;        userPane.setCardClickListener(&#10;            card -&gt; {&#10;&#10;              User selectedUser = (User) card.getUserData();&#10;              saveUserUseCase.execute(selectedUser.getId());&#10;&#10;              System.out.println(&quot;Active user: &quot; + selectedUser.getEmail() + &quot; was saved on properties.&quot;);&#10;&#10;              GlobalEventBus.get().post(new UserSavedAppEvent(selectedUser.getId()));&#10;              hide();&#10;            });&#10;&#10;        PauseTransition delay = new PauseTransition(Duration.seconds(0.5 * i));&#10;        delay.setOnFinished(&#10;            e -&gt; {&#10;              usersFlowPanel.getChildren().add(userPane);&#10;&#10;              JavaFXAnimationUtil.animationBuilder()&#10;                  .duration(Duration.seconds(0.5))&#10;                  .fadeIn(userPane)&#10;                  .buildAndPlay();&#10;            });&#10;&#10;        delay.play();&#10;      }&#10;  }&#10;&#10;  private SelectableCardController createUserPane(User user,long activeUserId) {&#10;&#10;    SelectableCardController card = new SelectableCardController();&#10;    card.setTitle(user.getFirstname() + &quot; &quot; + user.getLastname() + &quot; (&quot; + user.getInitials() + &quot;)&quot;);&#10;    card.getStyleClass().add(&quot;selectable-card&quot;);&#10;    card.setPrefHeight(135); // Ajusta la altura deseada&#10;    card.setPrefWidth(330);  // Ajusta el ancho deseado si necesitas uniformidad&#10;    card.setUserData(user);&#10;&#10;    String idStr = Long.toString(user.getId());&#10;    int lastDigit = Character.getNumericValue(idStr.charAt(idStr.length() - 2));&#10;    int avatarNum = (lastDigit % 4) + 1;&#10;    String avatarPath = &quot;/com/davidp/chessjourney/avatar/robot-avatar-&quot; + avatarNum + &quot;.png&quot;;&#10;    card.setImageUrl(avatarPath);&#10;&#10;    card.setSubtitles(new ArrayList&lt;&gt;());&#10;    card.getSubtitles().add(user.getEmail());&#10;    if (user.getId() == activeUserId) {&#10;&#10;      card.getSubtitles().add(&quot;&lt;Active User&gt;&quot;);&#10;    }&#10;&#10;    //card.setOnMouseClicked(this::optionClicked);&#10;&#10;    return card;&#10;  }&#10;&#10;  @Override&#10;  public void setLayout(double layoutX, double layoutY) {&#10;&#10;    rootPane.setLayoutX(layoutX);&#10;    rootPane.setLayoutY(layoutY);&#10;  }&#10;&#10;  @Override&#10;  public void show() {&#10;&#10;    rootPane.setVisible(false);&#10;&#10;    JavaFXAnimationUtil.animationBuilder()&#10;        .duration(Duration.seconds(0.2))&#10;        .onFinished(&#10;            () -&gt; {&#10;              rootPane.setVisible(true);&#10;              rootPane.toFront();&#10;            })&#10;        .fadeIn(rootPane)&#10;        .buildAndPlay();&#10;&#10;  }&#10;&#10;  @Override&#10;  public void show(InputScreenData inputData) {&#10;&#10;    setData(inputData);&#10;    status = ScreenStatus.VISIBLE;&#10;    show();&#10;  }&#10;&#10;  @Override&#10;  public void hide() {&#10;&#10;    JavaFXAnimationUtil.animationBuilder()&#10;        .duration(Duration.seconds(0.2))&#10;        .onFinished(&#10;            () -&gt; {&#10;              rootPane.setVisible(false);&#10;              status = ScreenStatus.HIDDEN;&#10;            })&#10;        .fadeOut(rootPane)&#10;        .buildAndPlay();&#10;  }&#10;&#10;  @Override&#10;  public boolean isVisible() {&#10;    return rootPane.isVisible();&#10;  }&#10;&#10;  @Override&#10;  public boolean isHidden() {&#10;    return !rootPane.isVisible();&#10;  }&#10;&#10;  @Override&#10;  public Pane getRootPane() {&#10;    return rootPane;&#10;  }&#10;&#10;  @Override&#10;  public ScreenStatus getStatus() {&#10;    return null;&#10;  }&#10;&#10;  @Override&#10;  public boolean isInitialized() {&#10;&#10;    return status == ScreenStatus.INITIALIZED;&#10;  }&#10;&#10;  protected void setPromoteViewInputScreenData(&#10;      PromoteViewInputScreenData promoteViewInputScreenData) {&#10;&#10;    this.promoteViewInputScreenData = promoteViewInputScreenData;&#10;  }&#10;&#10;  protected PromoteViewInputScreenData getPromoteViewInputScreenData() {&#10;&#10;    return promoteViewInputScreenData;&#10;  }&#10;&#10;  @FXML&#10;  void optionClicked(MouseEvent event) {&#10;&#10;    Pane userSelectedPane = (Pane) event.getSource();&#10;    User userSelected = (User) userSelectedPane.getUserData();&#10;    saveUserUseCase.execute(userSelected.getId());&#10;&#10;    System.out.println(&quot;Active user: &quot; + userSelected.getEmail() + &quot;was saved on properties.&quot;);&#10;&#10;    GlobalEventBus.get().post(new UserSavedAppEvent(userSelected.getId()));&#10;    hide();&#10;  }&#10;&#10;  @FXML&#10;  void buttonAction(ActionEvent event) {&#10;&#10;    if (event.getSource() == btClose) {&#10;&#10;      rootPane.setVisible(false);&#10;    }&#10;  }&#10;&#10;  public void setGetUsersUseCase(final GetUsersUseCase getUsersUseCase) {&#10;&#10;    this.getUsersUseCase = getUsersUseCase;&#10;  }&#10;&#10;  public void setSaveUserUseCase(final SaveActiveUserUseCase saveUserUseCase) {&#10;&#10;    this.saveUserUseCase = saveUserUseCase;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.ui.user;&#10;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.config.GlobalEventBus;&#10;import com.davidp.chessjourney.application.domain.*;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.board.PromoteViewInputScreenData;&#10;import com.davidp.chessjourney.application.ui.controls.SelectableCardController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import com.davidp.chessjourney.application.usecases.GetUsersUseCase;&#10;import com.davidp.chessjourney.application.usecases.SaveActiveUserUseCase;&#10;import com.davidp.chessjourney.application.util.JavaFXAnimationUtil;&#10;import com.davidp.chessjourney.domain.User;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import javafx.animation.PauseTransition;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.FlowPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.Pane;&#10;import javafx.util.Duration;&#10;&#10;public class UserViewController implements ScreenController {&#10;&#10;  private GetUsersUseCase getUsersUseCase;&#10;  private SaveActiveUserUseCase saveUserUseCase;&#10;&#10;  private ScreenStatus status;&#10;&#10;  private PromoteViewInputScreenData promoteViewInputScreenData;&#10;&#10;  @FXML private Button btClose;&#10;&#10;  @FXML private ImageView imgClose;&#10;&#10;  @FXML private Pane rootPane;&#10;&#10;&#10;  @FXML&#10;  private FlowPane usersFlowPanel;&#10;&#10;  public void initialize() {&#10;&#10;    status = ScreenStatus.INITIALIZED;&#10;  }&#10;&#10;  @Override&#10;  public void setData(InputScreenData inputData) {&#10;&#10;    if (inputData.isLayoutInfoValid()) {&#10;&#10;      setLayout(inputData.getLayoutX(), inputData.getLayoutY());&#10;    }&#10;&#10;    List&lt;User&gt; users = getUsersUseCase.execute();&#10;    long activeUserId = AppProperties.getInstance().getActiveUserId();&#10;    showUsersWithAnimation(users,activeUserId);&#10;  }&#10;&#10;  private void showUsersWithAnimation(List&lt;User&gt; users, long activeUserId) {&#10;&#10;    usersFlowPanel.getChildren().clear(); // Limpia la lista antes de mostrar nuevos usuarios&#10;&#10;    usersFlowPanel.setHgap(20);  // espacio horizontal entre tarjetas&#10;    usersFlowPanel.setVgap(20);  // espacio vertical entre filas&#10;    usersFlowPanel.setPrefWrapLength(400); // ancho máximo antes de crear una nueva fila&#10;&#10;      for (int i = 0; i &lt; users.size(); i++) {&#10;&#10;        User user = users.get(i);&#10;&#10;        SelectableCardController userPane = createUserPane(user, activeUserId);&#10;&#10;        userPane.setCardClickListener(this::onUserCardClicked);&#10;&#10;        PauseTransition delay = new PauseTransition(Duration.seconds(0.5 * i));&#10;        delay.setOnFinished(&#10;            e -&gt; {&#10;              usersFlowPanel.getChildren().add(userPane);&#10;&#10;              JavaFXAnimationUtil.animationBuilder()&#10;                  .duration(Duration.seconds(0.5))&#10;                  .fadeIn(userPane)&#10;                  .buildAndPlay();&#10;            });&#10;&#10;        delay.play();&#10;      }&#10;  }&#10;&#10;  private SelectableCardController createUserPane(User user,long activeUserId) {&#10;&#10;    SelectableCardController card = new SelectableCardController();&#10;    card.setTitle(user.getFirstname() + &quot; &quot; + user.getLastname() + &quot; (&quot; + user.getInitials() + &quot;)&quot;);&#10;    card.getStyleClass().add(&quot;selectable-card&quot;);&#10;    card.setPrefHeight(135); // Ajusta la altura deseada&#10;    card.setPrefWidth(330);  // Ajusta el ancho deseado si necesitas uniformidad&#10;    card.setUserData(user);&#10;&#10;    String idStr = Long.toString(user.getId());&#10;    int lastDigit = Character.getNumericValue(idStr.charAt(idStr.length() - 2));&#10;    int avatarNum = (lastDigit % 4) + 1;&#10;    String avatarPath = &quot;/com/davidp/chessjourney/avatar/robot-avatar-&quot; + avatarNum + &quot;.png&quot;;&#10;    card.setImageUrl(avatarPath);&#10;&#10;    card.setSubtitles(new ArrayList&lt;&gt;());&#10;    card.getSubtitles().add(user.getEmail());&#10;    if (user.getId() == activeUserId) {&#10;&#10;      card.getSubtitles().add(&quot;&lt;Active User&gt;&quot;);&#10;    }&#10;&#10;    //card.setOnMouseClicked(this::optionClicked);&#10;&#10;    return card;&#10;  }&#10;&#10;  @Override&#10;  public void setLayout(double layoutX, double layoutY) {&#10;&#10;    rootPane.setLayoutX(layoutX);&#10;    rootPane.setLayoutY(layoutY);&#10;  }&#10;&#10;  @Override&#10;  public void show() {&#10;&#10;    rootPane.setVisible(false);&#10;&#10;    JavaFXAnimationUtil.animationBuilder()&#10;        .duration(Duration.seconds(0.2))&#10;        .onFinished(&#10;            () -&gt; {&#10;              rootPane.setVisible(true);&#10;              rootPane.toFront();&#10;            })&#10;        .fadeIn(rootPane)&#10;        .buildAndPlay();&#10;&#10;  }&#10;&#10;  @Override&#10;  public void show(InputScreenData inputData) {&#10;&#10;    setData(inputData);&#10;    status = ScreenStatus.VISIBLE;&#10;    show();&#10;  }&#10;&#10;  @Override&#10;  public void hide() {&#10;&#10;    JavaFXAnimationUtil.animationBuilder()&#10;        .duration(Duration.seconds(0.2))&#10;        .onFinished(&#10;            () -&gt; {&#10;              rootPane.setVisible(false);&#10;              status = ScreenStatus.HIDDEN;&#10;            })&#10;        .fadeOut(rootPane)&#10;        .buildAndPlay();&#10;  }&#10;&#10;  @Override&#10;  public boolean isVisible() {&#10;    return rootPane.isVisible();&#10;  }&#10;&#10;  @Override&#10;  public boolean isHidden() {&#10;    return !rootPane.isVisible();&#10;  }&#10;&#10;  @Override&#10;  public Pane getRootPane() {&#10;    return rootPane;&#10;  }&#10;&#10;  @Override&#10;  public ScreenStatus getStatus() {&#10;    return null;&#10;  }&#10;&#10;  @Override&#10;  public boolean isInitialized() {&#10;&#10;    return status == ScreenStatus.INITIALIZED;&#10;  }&#10;&#10;  protected void setPromoteViewInputScreenData(&#10;      PromoteViewInputScreenData promoteViewInputScreenData) {&#10;&#10;    this.promoteViewInputScreenData = promoteViewInputScreenData;&#10;  }&#10;&#10;  protected PromoteViewInputScreenData getPromoteViewInputScreenData() {&#10;&#10;    return promoteViewInputScreenData;&#10;  }&#10;&#10;  @FXML&#10;  void optionClicked(MouseEvent event) {&#10;&#10;    Pane userSelectedPane = (Pane) event.getSource();&#10;    User userSelected = (User) userSelectedPane.getUserData();&#10;    saveUserUseCase.execute(userSelected.getId());&#10;&#10;    System.out.println(&quot;Active user: &quot; + userSelected.getEmail() + &quot;was saved on properties.&quot;);&#10;&#10;    GlobalEventBus.get().post(new UserSavedAppEvent(userSelected.getId()));&#10;    hide();&#10;  }&#10;&#10;  @FXML&#10;  void buttonAction(ActionEvent event) {&#10;&#10;    if (event.getSource() == btClose) {&#10;&#10;      rootPane.setVisible(false);&#10;    }&#10;  }&#10;&#10;  public void setGetUsersUseCase(final GetUsersUseCase getUsersUseCase) {&#10;&#10;    this.getUsersUseCase = getUsersUseCase;&#10;  }&#10;&#10;  public void setSaveUserUseCase(final SaveActiveUserUseCase saveUserUseCase) {&#10;&#10;    this.saveUserUseCase = saveUserUseCase;&#10;  }&#10;&#10;  private void onUserCardClicked(SelectableCardController card) {&#10;    User selectedUser = (User) card.getUserData();&#10;    saveUserUseCase.execute(selectedUser.getId());&#10;    System.out.println(&quot;Active user: &quot; + selectedUser.getEmail() + &quot; was saved on properties.&quot;);&#10;    GlobalEventBus.get().post(new UserSavedAppEvent(selectedUser.getId()));&#10;    hide();&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
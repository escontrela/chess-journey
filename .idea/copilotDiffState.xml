<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/ChessJourneyAppJavaFx.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/ChessJourneyAppJavaFx.java" />
              <option name="originalContent" value="package com.davidp.chessjourney;&#10;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.ui.main.MainSceneController;&#10;import javafx.application.Application;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.paint.Color;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;&#10;/** @see &lt;a href=&quot;https://github.com/AlmasB/FXGL&quot;&gt;FXGL framework&lt;/a&gt; */&#10;/**&#10; * @see &lt;a&#10; *     href=&quot;https://fonts.google.com/icons?selected=Material+Symbols+Outlined:close:FILL@0;wght@400;GRAD@0;opsz@20&amp;icon.query=close&amp;icon.size=18&amp;icon.color=%23353535&quot;&gt;Google&#10; *     Material design&lt;/a&gt;&#10; */&#10;&#10;/** @see &lt;a href=&quot;https://coolors.co/palettes/trending&quot;&gt;Coolors&lt;/a&gt; */&#10;public class ChessJourneyAppJavaFx extends Application {&#10;&#10;  GridPane chessBoard = null;&#10;  String fenPosition = &quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;;&#10;&#10;  private static Stage primaryStage;&#10;&#10;  /** Old Code * */&#10;  public static void main(String[] args) {&#10;&#10;    launch(args);&#10;  }&#10;&#10;  @Override&#10;  public void start(Stage stage) throws Exception {&#10;&#10;    try {&#10;      primaryStage = stage;&#10;      primaryStage.setTitle(&quot;Chess Journey&quot;);&#10;      primaryStage.initStyle(StageStyle.TRANSPARENT);&#10;&#10;      FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;main-scene-3.fxml&quot;));&#10;      Pane root = loader.load();&#10;&#10;      MainSceneController mainController = loader.getController();&#10;      mainController.setStage(primaryStage);&#10;&#10;      Scene scene = new Scene(root);&#10;      primaryStage.setScene(scene);&#10;      scene.setFill(Color.TRANSPARENT);&#10;      primaryStage.show();&#10;&#10;      System.out.println(&#10;          String.format(&quot;UserId: %s&quot;, AppProperties.getInstance().getActiveUserId()));&#10;&#10;    } catch (Exception e) {&#10;&#10;      e.printStackTrace();&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney;&#10;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.ui.main.MainSceneController;&#10;import javafx.application.Application;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.paint.Color;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;&#10;/** @see &lt;a href=&quot;https://github.com/AlmasB/FXGL&quot;&gt;FXGL framework&lt;/a&gt; */&#10;/**&#10; * @see &lt;a&#10; *     href=&quot;https://fonts.google.com/icons?selected=Material+Symbols+Outlined:close:FILL@0;wght@400;GRAD@0;opsz@20&amp;icon.query=close&amp;icon.size=18&amp;icon.color=%23353535&quot;&gt;Google&#10; *     Material design&lt;/a&gt;&#10; */&#10;&#10;/** @see &lt;a href=&quot;https://coolors.co/palettes/trending&quot;&gt;Coolors&lt;/a&gt; */&#10;public class ChessJourneyAppJavaFx extends Application {&#10;&#10;  GridPane chessBoard = null;&#10;  String fenPosition = &quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;;&#10;&#10;  private static Stage primaryStage;&#10;&#10;  /** Old Code * */&#10;  public static void main(String[] args) {&#10;&#10;    launch(args);&#10;  }&#10;&#10;  @Override&#10;  public void start(Stage stage) throws Exception {&#10;&#10;    try {&#10;      primaryStage = stage;&#10;      primaryStage.setTitle(&quot;Chess Journey&quot;);&#10;      primaryStage.initStyle(StageStyle.TRANSPARENT);&#10;&#10;      FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;main-scene-3.fxml&quot;));&#10;      Pane root = loader.load();&#10;&#10;      MainSceneController mainController = loader.getController();&#10;      mainController.setStage(primaryStage);&#10;&#10;      Scene scene = new Scene(root);&#10;      primaryStage.setScene(scene);&#10;      scene.setFill(Color.TRANSPARENT);&#10;      // Efecto niebla al iniciar&#10;      root.layoutBoundsProperty().addListener((obs, oldVal, newVal) -&gt; {&#10;        if (newVal.getWidth() &gt; 0 &amp;&amp; newVal.getHeight() &gt; 0) {&#10;          com.davidp.chessjourney.application.util.JavaFXAnimationUtil.playFogEffect(root, 2.0);&#10;        }&#10;      });&#10;      primaryStage.show();&#10;&#10;      System.out.println(&#10;          String.format(&quot;UserId: %s&quot;, AppProperties.getInstance().getActiveUserId()));&#10;&#10;    } catch (Exception e) {&#10;&#10;      e.printStackTrace();&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil {&#10;    private final EnumMap&lt;Enum&lt;?&gt;, AudioClip&gt; soundCache = new EnumMap&lt;&gt;(Enum.class);&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public &lt;E extends Enum&lt;E&gt;&gt; void preloadSounds(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(Enum&lt;?&gt; type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;E&gt; {&#10;        String getResourceName(E type);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil&lt;E extends Enum&lt;E&gt;&gt; {&#10;    private final EnumMap&lt;E, AudioClip&gt; soundCache;&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public JavaFXSoundUtil(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        soundCache = new EnumMap&lt;&gt;(enumClass);&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(E type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;T&gt; {&#10;        String getResourceName(T type);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil();&#10;    soundUtil.preloadSounds(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil&lt;SoundType&gt; soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil&lt;&gt;(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/board/ExerciseResultViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/board/ExerciseResultViewController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.ui.board;&#10;&#10;import com.davidp.chessjourney.application.factories.SoundServiceFactory;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import com.davidp.chessjourney.application.util.JavaFXAnimationUtil;&#10;import com.davidp.chessjourney.application.util.JavaFXGameTimerUtil;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.input.KeyEvent;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.Pane;&#10;import javafx.util.Duration;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.ImageView;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static javafx.application.Platform.runLater;&#10;&#10;public class ExerciseResultViewController implements ScreenController {&#10;&#10;    private ScreenController.ScreenStatus status;&#10;&#10;    private ExerciseResultViewInputScreenData exerciseResultViewInputScreenData;&#10;&#10;    private final SoundServiceFactory soundService = SoundServiceFactory.getInstance();&#10;&#10;    @FXML&#10;    private Button btOk;&#10;&#10;    @FXML&#10;    private ImageView imgNotice;&#10;&#10;    @FXML&#10;    private ImageView imgOk;&#10;&#10;    @FXML&#10;    private ImageView imgStar1;&#10;&#10;    @FXML&#10;    private ImageView imgStar2;&#10;&#10;    @FXML&#10;    private ImageView imgStar3;&#10;&#10;    @FXML&#10;    private ImageView imgStar4;&#10;&#10;    @FXML&#10;    private ImageView imgStar5;&#10;&#10;    @FXML&#10;    private ImageView imgStar6;&#10;&#10;    @FXML&#10;    private Label lblPercent;&#10;&#10;    @FXML&#10;    private Pane rootPane;&#10;&#10;    @FXML&#10;    void keyPressed(KeyEvent event) {&#10;&#10;    }&#10;&#10;    @FXML&#10;    void mouseClicked(MouseEvent event) {&#10;&#10;    }&#10;&#10;    public void initialize() {&#10;&#10;        status = ScreenController.ScreenStatus.INITIALIZED;&#10;&#10;    }&#10;&#10;    @Override&#10;    public void setData(InputScreenData inputData) {&#10;&#10;        if (inputData == null) {&#10;            return;&#10;        }&#10;&#10;&#10;        lblPercent.setText(&quot;...&quot;);&#10;&#10;        if (inputData.isLayoutInfoValid()) {&#10;&#10;                setLayout(inputData.getLayoutX(), inputData.getLayoutY());&#10;        }&#10;        this.exerciseResultViewInputScreenData = (ExerciseResultViewInputScreenData) inputData;&#10;        lblPercent.setText(this.exerciseResultViewInputScreenData.getPercentage() + &quot; %!&quot;);&#10;        showStarsProgressively(this.exerciseResultViewInputScreenData.getPercentage());&#10;    }&#10;&#10;    @Override&#10;    public void setLayout(double layoutX, double layoutY) {&#10;&#10;        rootPane.setLayoutX(layoutX);&#10;        rootPane.setLayoutY(layoutY);&#10;    }&#10;&#10;    @Override&#10;    public void show() {&#10;&#10;        rootPane.setVisible(false);&#10;&#10;        // Fade in animation when showing (custom util)&#10;        JavaFXAnimationUtil.animationBuilder()&#10;                .duration(Duration.seconds(0.2))&#10;                .onFinished(() -&gt; {&#10;                    rootPane.setVisible(true);&#10;                    rootPane.toFront();&#10;                })&#10;                .fadeIn(rootPane)&#10;                .buildAndPlay();&#10;    }&#10;&#10;    @Override&#10;    public void show(InputScreenData inputData) {&#10;&#10;        setData(inputData);&#10;        status = ScreenController.ScreenStatus.VISIBLE;&#10;        show();&#10;    }&#10;&#10;    @Override&#10;    public void hide() {&#10;&#10;        FXGL.animationBuilder()&#10;                .duration(Duration.seconds(0.2))&#10;                .onFinished(&#10;                        () -&gt; {&#10;                            rootPane.setVisible(false);&#10;                            status = ScreenStatus.HIDDEN;&#10;                        })&#10;                .fadeOut(rootPane)&#10;                .buildAndPlay();&#10;    }&#10;&#10;&#10;    @Override&#10;    public boolean isVisible() {&#10;        return rootPane.isVisible();&#10;    }&#10;&#10;    @Override&#10;    public boolean isHidden() {&#10;        return !rootPane.isVisible();&#10;    }&#10;&#10;    @Override&#10;    public Pane getRootPane() {&#10;        return rootPane;&#10;    }&#10;&#10;    @Override&#10;    public ScreenStatus getStatus() {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public boolean isInitialized() {&#10;&#10;        return status == ScreenController.ScreenStatus.INITIALIZED;&#10;    }&#10;&#10;    protected void setExerciseResultViewInputScreenData(ExerciseResultViewInputScreenData exerciseResultViewInputScreenData) {&#10;&#10;        this.exerciseResultViewInputScreenData = exerciseResultViewInputScreenData;&#10;    }&#10;&#10;    protected ExerciseResultViewInputScreenData getExerciseResultViewInputScreenData() {&#10;&#10;        return exerciseResultViewInputScreenData;&#10;    }&#10;&#10;    @FXML&#10;    void buttonAction(ActionEvent event) {&#10;&#10;        if (event.getSource() == btOk) {&#10;&#10;            hide();&#10;        }&#10;&#10;    }&#10;&#10;    /**&#10;     * Show stars progressively based on the percentage&#10;     * @param percent percentage of stars to show&#10;     */&#10;    private void showStarsProgressively(double percent) {&#10;&#10;        int starsToShow = (int) Math.round((percent / 100.0) * 6);&#10;        List&lt;ImageView&gt; stars = Arrays.asList(imgStar1, imgStar2, imgStar3, imgStar4, imgStar5, imgStar6);&#10;        stars.forEach(star -&gt; star.setImage(new Image(&quot;com/davidp/chessjourney/img-gray/stars_48dp_gray.png&quot;)));&#10;&#10;        // Show stars progressively&#10;        for (int i = 0; i &lt; starsToShow; i++) {&#10;            int starIndex = i;&#10;            JavaFXGameTimerUtil.runLoop(&#10;                    () -&gt; {&#10;                        stars.get(starIndex).setImage(new Image(&quot;com/davidp/chessjourney/img-gray/stars_48dp_purple.png&quot;));&#10;                        runLater(() -&gt; soundService.playSound(SoundServiceFactory.SoundType.SUCCEED_EXERCISE));&#10;                    },&#10;                    Duration.millis(400 * (i + 1))&#10;&#10;            );&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.ui.board;&#10;&#10;import com.davidp.chessjourney.application.factories.SoundServiceFactory;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import com.davidp.chessjourney.application.util.JavaFXAnimationUtil;&#10;import com.davidp.chessjourney.application.util.JavaFXGameTimerUtil;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.input.KeyEvent;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.Pane;&#10;import javafx.util.Duration;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.ImageView;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static javafx.application.Platform.runLater;&#10;&#10;public class ExerciseResultViewController implements ScreenController {&#10;&#10;    private ScreenController.ScreenStatus status;&#10;&#10;    private ExerciseResultViewInputScreenData exerciseResultViewInputScreenData;&#10;&#10;    private final SoundServiceFactory soundService = SoundServiceFactory.getInstance();&#10;&#10;    @FXML&#10;    private Button btOk;&#10;&#10;    @FXML&#10;    private ImageView imgNotice;&#10;&#10;    @FXML&#10;    private ImageView imgOk;&#10;&#10;    @FXML&#10;    private ImageView imgStar1;&#10;&#10;    @FXML&#10;    private ImageView imgStar2;&#10;&#10;    @FXML&#10;    private ImageView imgStar3;&#10;&#10;    @FXML&#10;    private ImageView imgStar4;&#10;&#10;    @FXML&#10;    private ImageView imgStar5;&#10;&#10;    @FXML&#10;    private ImageView imgStar6;&#10;&#10;    @FXML&#10;    private Label lblPercent;&#10;&#10;    @FXML&#10;    private Pane rootPane;&#10;&#10;    @FXML&#10;    void keyPressed(KeyEvent event) {&#10;&#10;    }&#10;&#10;    @FXML&#10;    void mouseClicked(MouseEvent event) {&#10;&#10;    }&#10;&#10;    public void initialize() {&#10;&#10;        status = ScreenController.ScreenStatus.INITIALIZED;&#10;&#10;    }&#10;&#10;    @Override&#10;    public void setData(InputScreenData inputData) {&#10;&#10;        if (inputData == null) {&#10;            return;&#10;        }&#10;&#10;&#10;        lblPercent.setText(&quot;...&quot;);&#10;&#10;        if (inputData.isLayoutInfoValid()) {&#10;&#10;                setLayout(inputData.getLayoutX(), inputData.getLayoutY());&#10;        }&#10;        this.exerciseResultViewInputScreenData = (ExerciseResultViewInputScreenData) inputData;&#10;        lblPercent.setText(this.exerciseResultViewInputScreenData.getPercentage() + &quot; %!&quot;);&#10;        showStarsProgressively(this.exerciseResultViewInputScreenData.getPercentage());&#10;    }&#10;&#10;    @Override&#10;    public void setLayout(double layoutX, double layoutY) {&#10;&#10;        rootPane.setLayoutX(layoutX);&#10;        rootPane.setLayoutY(layoutY);&#10;    }&#10;&#10;    @Override&#10;    public void show() {&#10;&#10;        rootPane.setVisible(false);&#10;&#10;        // Fade in animation when showing (custom util)&#10;        JavaFXAnimationUtil.animationBuilder()&#10;                .duration(Duration.seconds(0.2))&#10;                .onFinished(() -&gt; {&#10;                    rootPane.setVisible(true);&#10;                    rootPane.toFront();&#10;                })&#10;                .fadeIn(rootPane)&#10;                .buildAndPlay();&#10;    }&#10;&#10;    @Override&#10;    public void show(InputScreenData inputData) {&#10;&#10;        setData(inputData);&#10;        status = ScreenController.ScreenStatus.VISIBLE;&#10;        show();&#10;    }&#10;&#10;    @Override&#10;    public void hide() {&#10;&#10;        JavaFXAnimationUtil.animationBuilder()&#10;                .duration(Duration.seconds(0.2))&#10;                .onFinished(() -&gt; {&#10;                    rootPane.setVisible(false);&#10;                    status = ScreenStatus.HIDDEN;&#10;                })&#10;                .fadeOut(rootPane)&#10;                .buildAndPlay();&#10;    }&#10;&#10;&#10;    @Override&#10;    public boolean isVisible() {&#10;        return rootPane.isVisible();&#10;    }&#10;&#10;    @Override&#10;    public boolean isHidden() {&#10;        return !rootPane.isVisible();&#10;    }&#10;&#10;    @Override&#10;    public Pane getRootPane() {&#10;        return rootPane;&#10;    }&#10;&#10;    @Override&#10;    public ScreenStatus getStatus() {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public boolean isInitialized() {&#10;&#10;        return status == ScreenController.ScreenStatus.INITIALIZED;&#10;    }&#10;&#10;    protected void setExerciseResultViewInputScreenData(ExerciseResultViewInputScreenData exerciseResultViewInputScreenData) {&#10;&#10;        this.exerciseResultViewInputScreenData = exerciseResultViewInputScreenData;&#10;    }&#10;&#10;    protected ExerciseResultViewInputScreenData getExerciseResultViewInputScreenData() {&#10;&#10;        return exerciseResultViewInputScreenData;&#10;    }&#10;&#10;    @FXML&#10;    void buttonAction(ActionEvent event) {&#10;&#10;        if (event.getSource() == btOk) {&#10;&#10;            hide();&#10;        }&#10;&#10;    }&#10;&#10;    /**&#10;     * Show stars progressively based on the percentage&#10;     * @param percent percentage of stars to show&#10;     */&#10;    private void showStarsProgressively(double percent) {&#10;&#10;        int starsToShow = (int) Math.round((percent / 100.0) * 6);&#10;        List&lt;ImageView&gt; stars = Arrays.asList(imgStar1, imgStar2, imgStar3, imgStar4, imgStar5, imgStar6);&#10;        stars.forEach(star -&gt; star.setImage(new Image(&quot;com/davidp/chessjourney/img-gray/stars_48dp_gray.png&quot;)));&#10;&#10;        // Show stars progressively&#10;        for (int i = 0; i &lt; starsToShow; i++) {&#10;            int starIndex = i;&#10;            JavaFXGameTimerUtil.runLoop(&#10;                    () -&gt; {&#10;                        stars.get(starIndex).setImage(new Image(&quot;com/davidp/chessjourney/img-gray/stars_48dp_purple.png&quot;));&#10;                        runLater(() -&gt; soundService.playSound(SoundServiceFactory.SoundType.SUCCEED_EXERCISE));&#10;                    },&#10;                    Duration.millis(400 * (i + 1))&#10;&#10;            );&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/main/MainSceneController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/main/MainSceneController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.ui.main;&#10;&#10;import static com.almasb.fxgl.dsl.FXGLForKtKt.*;&#10;import static javafx.application.Platform.runLater;&#10;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import com.almasb.fxgl.entity.Entity;&#10;import com.almasb.fxgl.particle.ParticleComponent;&#10;import com.almasb.fxgl.particle.ParticleEmitter;&#10;import com.almasb.fxgl.particle.ParticleEmitters;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.config.GlobalEventBus;&#10;import com.davidp.chessjourney.application.domain.*;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory.Screens;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import com.davidp.chessjourney.application.ui.settings.SettingsViewInputScreenData;&#10;import com.davidp.chessjourney.application.ui.user.UserStatsInputScreenData;&#10;import com.davidp.chessjourney.application.ui.util.FXAnimationUtil;&#10;import com.davidp.chessjourney.application.usecases.GetAllTagsUseCase;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import com.davidp.chessjourney.domain.common.Tag;&#10;import com.google.common.eventbus.Subscribe;&#10;import java.awt.*;&#10;import java.util.List;&#10;import java.io.IOException;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import javafx.application.Platform;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.Node;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.Pane;&#10;import javafx.scene.layout.StackPane;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.text.Text;&#10;import javafx.stage.Stage;&#10;import javafx.util.Duration;&#10;&#10;/**&#10; * This class is responsible for managing the main scene of the application, the main scene controls&#10; * all the features and windows dynamics of the application It is responsible for managing the main&#10; * menu, the settings menu, the board, and the game.&#10; */&#10;public class MainSceneController implements ScreenController {&#10;&#10;  @FXML private Button btClose;&#10;&#10;  @FXML private Button btLeft;&#10;&#10;  @FXML private Button btRight;&#10;&#10;  @FXML private Button btSettings;&#10;&#10;  @FXML private Label lbUserInitials;&#10;&#10;  @FXML private Pane mainPane;&#10;&#10;  @FXML private Pane pnlMessage;&#10;&#10;  @FXML private StackPane pnlMenu;&#10;&#10;  @FXML private ImageView imgClose;&#10;&#10;  @FXML private ImageView imgSettings;&#10;&#10;  @FXML private ImageView imgLogo;&#10;&#10;&#10;  @FXML&#10;  private Text lblPractice;&#10;&#10;  @FXML&#10;  private Text lblChessboard;&#10;&#10;&#10;  // Variables para guardar la posición (offset) dentro de la ventana al pulsar el ratón&#10;  private double xOffset = 0;&#10;  private double yOffset = 0;&#10;&#10;  // This map is used to cache the screens that are created.&#10;  private final Map&lt;Screens, ScreenController&gt; screenManager = new HashMap&lt;&gt;();&#10;  private static final Point MENU_POSITION = new Point(20, 460);&#10;  private static final Point SETTINGS_POSITION = new Point(250, 250);&#10;  private static final Point BOARD_POSITION = new Point(140, 60);&#10;  private static final Point MEMORY_GAME_POSITION = new Point(140, 60);&#10;  private static final Point DEFEND_GAME_POSITION = new Point(140, 60);&#10;  private static final Point CHANGE_USER_POSITION = new Point(350, 250);&#10;  private static final Point USER_STATS_POSITION = new Point(210, 120);&#10;&#10;&#10;  @FXML&#10;  void buttonAction(ActionEvent event) {&#10;&#10;    if (isButtonCloseClicked(event)) {&#10;&#10;      hide();&#10;      return;&#10;    }&#10;&#10;    if (isButtonSettingsClicked(event)) {&#10;&#10;      manageSettingsMenuVisibility();&#10;      return;&#10;    }&#10;&#10;    if (event.getSource() == btLeft || event.getSource() == btRight) {&#10;&#10;      showInfoPanel(pnlMessage);&#10;&#10;    }&#10;  }&#10;&#10;  @FXML&#10;  public void handleButtonClick(MouseEvent event) {&#10;&#10;    if (isContextMenuClicked(event)) {&#10;&#10;      manageContextMenuVisibility();&#10;      return;&#10;    }&#10;  }&#10;&#10;  /** This method is called when the user clicks on the logger user icon. */&#10;  private void manageContextMenuVisibility() {&#10;&#10;    ScreenController contextMenuController = getScreen(Screens.MENU);&#10;&#10;    if (contextMenuController.isVisible() &amp;&amp; !contextMenuController.isInitialized()) {&#10;      contextMenuController.hide();&#10;      return;&#10;    }&#10;&#10;    contextMenuController.show(InputScreenData.fromPosition(MENU_POSITION));&#10;  }&#10;&#10;  private void manageSettingsMenuVisibility() {&#10;&#10;    ScreenController settingMenuController = getScreen(Screens.SETTINGS);&#10;    if (settingMenuController.isVisible() &amp;&amp; !settingMenuController.isInitialized()) {&#10;&#10;      settingMenuController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), SETTINGS_POSITION);&#10;&#10;    settingMenuController.show(inputData);&#10;  }&#10;&#10;  protected boolean isContextMenuClicked(MouseEvent event) {&#10;&#10;    return event.getSource() == lbUserInitials || event.getSource() == pnlMenu;&#10;  }&#10;&#10;  private boolean isButtonCloseClicked(ActionEvent event) {&#10;&#10;    return event.getSource() == btClose || event.getSource() == imgClose;&#10;  }&#10;&#10;  private boolean isButtonSettingsClicked(ActionEvent event) {&#10;&#10;    return event.getSource() == btSettings || event.getSource() == imgSettings;&#10;  }&#10;&#10;  private void showInfoPanel(Pane panel) {&#10;&#10;    panel.setVisible(!panel.isVisible());&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserSaved(UserSavedAppEvent event) {&#10;&#10;    Platform.runLater(&#10;        () -&gt; {&#10;          System.out.println(&quot;Se guardó el usuario: &quot; + event.getUserId());&#10;          reloadUserInitials(event.getUserId());&#10;        });&#10;  }&#10;&#10;  @Subscribe&#10;  public void onMenuSettingsClicked(OpenSettingsFromMenuEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageSettingsMenuVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onAnalysisBoardClicked(OpenAnalysisBoardEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageAnalysisBoardVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserChanged(ChangeUserEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageChangeUserVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onMemoryGameClicked(OpenMemoryGameEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageMemoryGameVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onDefendGameClicked(OpenDefendGameEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageDefendGameVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserStatsClicked(OpenUserStatsEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageUserStatsVisibility();&#10;  }&#10;  private void manageDefendGameVisibility() {&#10;&#10;    ScreenController defendGameController = getScreen(Screens.DEFEND_GAME);&#10;    if (defendGameController.isVisible() &amp;&amp; !defendGameController.isInitialized()) {&#10;&#10;      defendGameController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;            new SettingsViewInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), DEFEND_GAME_POSITION);&#10;    defendGameController.show(inputData);&#10;  }&#10;&#10;&#10;  private void manageMemoryGameVisibility() {&#10;&#10;    ScreenController memoryGameController = getScreen(Screens.MEMORY_GAME);&#10;    if (memoryGameController.isVisible() &amp;&amp; !memoryGameController.isInitialized()) {&#10;&#10;      memoryGameController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), MEMORY_GAME_POSITION);&#10;    memoryGameController.show(inputData);&#10;  }&#10;&#10;  private void manageAnalysisBoardVisibility() {&#10;&#10;    ScreenController boardController = getScreen(Screens.BOARD);&#10;    if (boardController.isVisible() &amp;&amp; !boardController.isInitialized()) {&#10;&#10;      boardController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), BOARD_POSITION);&#10;    boardController.show(inputData);&#10;  }&#10;&#10;  private void manageChangeUserVisibility() {&#10;&#10;    ScreenController changeUserController = getScreen(Screens.CHANGE_USER);&#10;    if (changeUserController.isVisible() &amp;&amp; !changeUserController.isInitialized()) {&#10;&#10;      changeUserController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;            new SettingsViewInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), CHANGE_USER_POSITION);&#10;    changeUserController.show(inputData);&#10;  }&#10;&#10;  private void manageUserStatsVisibility() {&#10;&#10;    ScreenController userStatsController = getScreen(Screens.USER_STATS);&#10;    if (userStatsController.isVisible() &amp;&amp; !userStatsController.isInitialized()) {&#10;&#10;      userStatsController.hide();&#10;      return;&#10;    }&#10;&#10;    UserStatsInputScreenData inputData =&#10;            new UserStatsInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), USER_STATS_POSITION);&#10;    userStatsController.show(inputData);&#10;  }&#10;&#10;  public MainSceneController() {&#10;&#10;    GlobalEventBus.get().register(this);&#10;  }&#10;&#10;  /** All the logic starts here! */&#10;  @FXML&#10;  public void initialize() {&#10;&#10;    moveMainWindowsSetUp();&#10;    reloadUserInitials(AppProperties.getInstance().getActiveUserId());&#10;    showTextAnimation();&#10;  }&#10;&#10;  private void showTextAnimation() {&#10;&#10;    playTypeWriterEffect(lblChessboard.getText(), lblChessboard,0.1);&#10;    playTypeWriterEffect(lblPractice.getText(), lblPractice,0.1);&#10;&#10;  }&#10;&#10;  private void moveMainWindowsSetUp() {&#10;    imgLogo.setOnMousePressed(&#10;        event -&gt; {&#10;          xOffset = event.getSceneX();&#10;          yOffset = event.getSceneY();&#10;        });&#10;&#10;    imgLogo.setOnMouseDragged(&#10;        event -&gt; {&#10;          Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;&#10;          stage.setX(event.getScreenX() - xOffset);&#10;          stage.setY(event.getScreenY() - yOffset);&#10;        });&#10;  }&#10;&#10;  /**&#10;   * Get or initialize the screen controller for the given screen&#10;   *&#10;   * @param screen Screen to get&#10;   * @return ScreenController for the given screen&#10;   */&#10;  protected ScreenController getScreen(Screens screen) {&#10;&#10;    return screenManager.computeIfAbsent(&#10;        screen,&#10;        s -&gt; {&#10;          try {&#10;&#10;            var cachedScreen = ScreenFactory.getInstance().createScreen(s);&#10;            mainPane.getChildren().add(cachedScreen.getRootPane());&#10;            return cachedScreen;&#10;          } catch (IOException e) {&#10;&#10;            throw new RuntimeException(e);&#10;          }&#10;        });&#10;  }&#10;&#10;  private void reloadUserInitials(long userId) {&#10;&#10;    // TODO move createGetUserByUseCase to the constructor... to minimize dependencies&#10;    GetUserByIdUseCase getUserByIdUseCase = UseCaseFactory.createGetUserByIdUseCase();&#10;    User loggedUser = getUserByIdUseCase.execute(userId);&#10;    lbUserInitials.setText(loggedUser.getInitials());&#10;&#10;    FXAnimationUtil.fadeOut(lbUserInitials, 0.5)&#10;            .repeat(2)&#10;            .autoReverse(true)&#10;            .buildAndPlay();&#10;  }&#10;&#10;  private Stage stage;&#10;&#10;  public void setStage(final Stage fxStage) {&#10;&#10;    this.stage = fxStage;&#10;  }&#10;&#10;  public Stage getStage() {&#10;&#10;    return this.stage;&#10;  }&#10;&#10;  @Override&#10;  public void setData(InputScreenData inputData) {}&#10;&#10;  @Override&#10;  public void setLayout(double layoutX, double layoutY) {}&#10;&#10;  @Override&#10;  public void show() {}&#10;&#10;  @Override&#10;  public void show(InputScreenData inputData) {}&#10;&#10;  public void hide() {&#10;&#10;    stage.hide();&#10;  }&#10;&#10;  @Override&#10;  public Pane getRootPane() {&#10;    return mainPane;&#10;  }&#10;&#10;  @Override&#10;  public ScreenStatus getStatus() {&#10;    return null;&#10;  }&#10;&#10;  @Override&#10;  public boolean isInitialized() {&#10;    return false;&#10;  }&#10;&#10;  @Override&#10;  public boolean isVisible() {&#10;    return false;&#10;  }&#10;&#10;  @Override&#10;  public boolean isHidden() {&#10;    return false;&#10;  }&#10;&#10;  public void maximize() {&#10;&#10;    if (stage.isMaximized()) {&#10;&#10;      stage.setMaximized(false);&#10;&#10;    } else {&#10;&#10;      stage.setMaximized(true);&#10;    }&#10;  }&#10;&#10;  public void minimize() {&#10;&#10;    stage.setIconified(true);&#10;  }&#10;&#10;&#10;  private void playTypeWriterEffect(String text, Text textNode, double charInterval) {&#10;    textNode.setText(&quot;&quot;); // Asegurarse de que el Text esté vacío al iniciar&#10;    StringBuilder currentText = new StringBuilder();&#10;&#10;    for (int i = 0; i &lt; text.length(); i++) {&#10;      int index = i;&#10;      runOnce(() -&gt; {&#10;        currentText.append(text.charAt(index)); // Añadir la siguiente letra&#10;        textNode.setText(currentText.toString());&#10;          return null;&#10;      }, javafx.util.Duration.seconds(i * charInterval));&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.ui.main;&#10;&#10;import static com.almasb.fxgl.dsl.FXGLForKtKt.*;&#10;import static javafx.application.Platform.runLater;&#10;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import com.almasb.fxgl.entity.Entity;&#10;import com.almasb.fxgl.particle.ParticleComponent;&#10;import com.almasb.fxgl.particle.ParticleEmitter;&#10;import com.almasb.fxgl.particle.ParticleEmitters;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.config.GlobalEventBus;&#10;import com.davidp.chessjourney.application.domain.*;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory.Screens;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import com.davidp.chessjourney.application.ui.settings.SettingsViewInputScreenData;&#10;import com.davidp.chessjourney.application.ui.user.UserStatsInputScreenData;&#10;import com.davidp.chessjourney.application.ui.util.FXAnimationUtil;&#10;import com.davidp.chessjourney.application.usecases.GetAllTagsUseCase;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import com.davidp.chessjourney.domain.common.Tag;&#10;import com.google.common.eventbus.Subscribe;&#10;import java.awt.*;&#10;import java.util.List;&#10;import java.io.IOException;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import javafx.application.Platform;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.Node;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.Pane;&#10;import javafx.scene.layout.StackPane;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.text.Text;&#10;import javafx.stage.Stage;&#10;import javafx.util.Duration;&#10;&#10;/**&#10; * This class is responsible for managing the main scene of the application, the main scene controls&#10; * all the features and windows dynamics of the application It is responsible for managing the main&#10; * menu, the settings menu, the board, and the game.&#10; */&#10;public class MainSceneController implements ScreenController {&#10;&#10;  @FXML private Button btClose;&#10;&#10;  @FXML private Button btLeft;&#10;&#10;  @FXML private Button btRight;&#10;&#10;  @FXML private Button btSettings;&#10;&#10;  @FXML private Label lbUserInitials;&#10;&#10;  @FXML private Pane mainPane;&#10;&#10;  @FXML private Pane pnlMessage;&#10;&#10;  @FXML private StackPane pnlMenu;&#10;&#10;  @FXML private ImageView imgClose;&#10;&#10;  @FXML private ImageView imgSettings;&#10;&#10;  @FXML private ImageView imgLogo;&#10;&#10;&#10;  @FXML&#10;  private Text lblPractice;&#10;&#10;  @FXML&#10;  private Text lblChessboard;&#10;&#10;&#10;  // Variables para guardar la posición (offset) dentro de la ventana al pulsar el ratón&#10;  private double xOffset = 0;&#10;  private double yOffset = 0;&#10;&#10;  // This map is used to cache the screens that are created.&#10;  private final Map&lt;Screens, ScreenController&gt; screenManager = new HashMap&lt;&gt;();&#10;  private static final Point MENU_POSITION = new Point(20, 460);&#10;  private static final Point SETTINGS_POSITION = new Point(250, 250);&#10;  private static final Point BOARD_POSITION = new Point(140, 60);&#10;  private static final Point MEMORY_GAME_POSITION = new Point(140, 60);&#10;  private static final Point DEFEND_GAME_POSITION = new Point(140, 60);&#10;  private static final Point CHANGE_USER_POSITION = new Point(350, 250);&#10;  private static final Point USER_STATS_POSITION = new Point(210, 120);&#10;&#10;&#10;  @FXML&#10;  void buttonAction(ActionEvent event) {&#10;&#10;    if (isButtonCloseClicked(event)) {&#10;&#10;      hide();&#10;      return;&#10;    }&#10;&#10;    if (isButtonSettingsClicked(event)) {&#10;&#10;      manageSettingsMenuVisibility();&#10;      return;&#10;    }&#10;&#10;    if (event.getSource() == btLeft || event.getSource() == btRight) {&#10;&#10;      showInfoPanel(pnlMessage);&#10;&#10;    }&#10;  }&#10;&#10;  @FXML&#10;  public void handleButtonClick(MouseEvent event) {&#10;&#10;    if (isContextMenuClicked(event)) {&#10;&#10;      manageContextMenuVisibility();&#10;      return;&#10;    }&#10;  }&#10;&#10;  /** This method is called when the user clicks on the logger user icon. */&#10;  private void manageContextMenuVisibility() {&#10;&#10;    ScreenController contextMenuController = getScreen(Screens.MENU);&#10;&#10;    if (contextMenuController.isVisible() &amp;&amp; !contextMenuController.isInitialized()) {&#10;      contextMenuController.hide();&#10;      return;&#10;    }&#10;&#10;    contextMenuController.show(InputScreenData.fromPosition(MENU_POSITION));&#10;  }&#10;&#10;  private void manageSettingsMenuVisibility() {&#10;&#10;    ScreenController settingMenuController = getScreen(Screens.SETTINGS);&#10;    if (settingMenuController.isVisible() &amp;&amp; !settingMenuController.isInitialized()) {&#10;&#10;      settingMenuController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), SETTINGS_POSITION);&#10;&#10;    settingMenuController.show(inputData);&#10;  }&#10;&#10;  protected boolean isContextMenuClicked(MouseEvent event) {&#10;&#10;    return event.getSource() == lbUserInitials || event.getSource() == pnlMenu;&#10;  }&#10;&#10;  private boolean isButtonCloseClicked(ActionEvent event) {&#10;&#10;    return event.getSource() == btClose || event.getSource() == imgClose;&#10;  }&#10;&#10;  private boolean isButtonSettingsClicked(ActionEvent event) {&#10;&#10;    return event.getSource() == btSettings || event.getSource() == imgSettings;&#10;  }&#10;&#10;  private void showInfoPanel(Pane panel) {&#10;&#10;    panel.setVisible(!panel.isVisible());&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserSaved(UserSavedAppEvent event) {&#10;&#10;    Platform.runLater(&#10;        () -&gt; {&#10;          System.out.println(&quot;Se guardó el usuario: &quot; + event.getUserId());&#10;          reloadUserInitials(event.getUserId());&#10;        });&#10;  }&#10;&#10;  @Subscribe&#10;  public void onMenuSettingsClicked(OpenSettingsFromMenuEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageSettingsMenuVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onAnalysisBoardClicked(OpenAnalysisBoardEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageAnalysisBoardVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserChanged(ChangeUserEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageChangeUserVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onMemoryGameClicked(OpenMemoryGameEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageMemoryGameVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onDefendGameClicked(OpenDefendGameEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageDefendGameVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserStatsClicked(OpenUserStatsEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageUserStatsVisibility();&#10;  }&#10;  private void manageDefendGameVisibility() {&#10;&#10;    ScreenController defendGameController = getScreen(Screens.DEFEND_GAME);&#10;    if (defendGameController.isVisible() &amp;&amp; !defendGameController.isInitialized()) {&#10;&#10;      defendGameController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;            new SettingsViewInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), DEFEND_GAME_POSITION);&#10;    defendGameController.show(inputData);&#10;  }&#10;&#10;&#10;  private void manageMemoryGameVisibility() {&#10;&#10;    ScreenController memoryGameController = getScreen(Screens.MEMORY_GAME);&#10;    if (memoryGameController.isVisible() &amp;&amp; !memoryGameController.isInitialized()) {&#10;&#10;      memoryGameController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), MEMORY_GAME_POSITION);&#10;    memoryGameController.show(inputData);&#10;  }&#10;&#10;  private void manageAnalysisBoardVisibility() {&#10;&#10;    ScreenController boardController = getScreen(Screens.BOARD);&#10;    if (boardController.isVisible() &amp;&amp; !boardController.isInitialized()) {&#10;&#10;      boardController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), BOARD_POSITION);&#10;    boardController.show(inputData);&#10;  }&#10;&#10;  private void manageChangeUserVisibility() {&#10;&#10;    ScreenController changeUserController = getScreen(Screens.CHANGE_USER);&#10;    if (changeUserController.isVisible() &amp;&amp; !changeUserController.isInitialized()) {&#10;&#10;      changeUserController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;            new SettingsViewInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), CHANGE_USER_POSITION);&#10;    changeUserController.show(inputData);&#10;  }&#10;&#10;  private void manageUserStatsVisibility() {&#10;&#10;    ScreenController userStatsController = getScreen(Screens.USER_STATS);&#10;    if (userStatsController.isVisible() &amp;&amp; !userStatsController.isInitialized()) {&#10;&#10;      userStatsController.hide();&#10;      return;&#10;    }&#10;&#10;    UserStatsInputScreenData inputData =&#10;            new UserStatsInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), USER_STATS_POSITION);&#10;    userStatsController.show(inputData);&#10;  }&#10;&#10;  public MainSceneController() {&#10;&#10;    GlobalEventBus.get().register(this);&#10;  }&#10;&#10;  /** All the logic starts here! */&#10;  @FXML&#10;  public void initialize() {&#10;&#10;    moveMainWindowsSetUp();&#10;    reloadUserInitials(AppProperties.getInstance().getActiveUserId());&#10;    showTextAnimation();&#10;  }&#10;&#10;  private void showTextAnimation() {&#10;&#10;    playTypeWriterEffect(lblChessboard.getText(), lblChessboard,0.1);&#10;    playTypeWriterEffect(lblPractice.getText(), lblPractice,0.1);&#10;&#10;  }&#10;&#10;  private void moveMainWindowsSetUp() {&#10;    imgLogo.setOnMousePressed(&#10;        event -&gt; {&#10;          xOffset = event.getSceneX();&#10;          yOffset = event.getSceneY();&#10;        });&#10;&#10;    imgLogo.setOnMouseDragged(&#10;        event -&gt; {&#10;          Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;&#10;          stage.setX(event.getScreenX() - xOffset);&#10;          stage.setY(event.getScreenY() - yOffset);&#10;        });&#10;  }&#10;&#10;  /**&#10;   * Get or initialize the screen controller for the given screen&#10;   *&#10;   * @param screen Screen to get&#10;   * @return ScreenController for the given screen&#10;   */&#10;  protected ScreenController getScreen(Screens screen) {&#10;&#10;    return screenManager.computeIfAbsent(&#10;        screen,&#10;        s -&gt; {&#10;          try {&#10;&#10;            var cachedScreen = ScreenFactory.getInstance().createScreen(s);&#10;            mainPane.getChildren().add(cachedScreen.getRootPane());&#10;            return cachedScreen;&#10;          } catch (IOException e) {&#10;&#10;            throw new RuntimeException(e);&#10;          }&#10;        });&#10;  }&#10;&#10;  private void reloadUserInitials(long userId) {&#10;&#10;    // TODO move createGetUserByUseCase to the constructor... to minimize dependencies&#10;    GetUserByIdUseCase getUserByIdUseCase = UseCaseFactory.createGetUserByIdUseCase();&#10;    User loggedUser = getUserByIdUseCase.execute(userId);&#10;    lbUserInitials.setText(loggedUser.getInitials());&#10;&#10;    FXAnimationUtil.fadeOut(lbUserInitials, 0.5)&#10;            .repeat(2)&#10;            .autoReverse(true)&#10;            .buildAndPlay();&#10;  }&#10;&#10;  private Stage stage;&#10;&#10;  public void setStage(final Stage fxStage) {&#10;&#10;    this.stage = fxStage;&#10;  }&#10;&#10;  public Stage getStage() {&#10;&#10;    return this.stage;&#10;  }&#10;&#10;  @Override&#10;  public void setData(InputScreenData inputData) {}&#10;&#10;  @Override&#10;  public void setLayout(double layoutX, double layoutY) {}&#10;&#10;  @Override&#10;  public void show() {}&#10;&#10;  @Override&#10;  public void show(InputScreenData inputData) {}&#10;&#10;  public void hide() {&#10;&#10;    stage.hide();&#10;  }&#10;&#10;  @Override&#10;  public Pane getRootPane() {&#10;    return mainPane;&#10;  }&#10;&#10;  @Override&#10;  public ScreenStatus getStatus() {&#10;    return null;&#10;  }&#10;&#10;  @Override&#10;  public boolean isInitialized() {&#10;    return false;&#10;  }&#10;&#10;  @Override&#10;  public boolean isVisible() {&#10;    return false;&#10;  }&#10;&#10;  @Override&#10;  public boolean isHidden() {&#10;    return false;&#10;  }&#10;&#10;  public void maximize() {&#10;&#10;    if (stage.isMaximized()) {&#10;&#10;      stage.setMaximized(false);&#10;&#10;    } else {&#10;&#10;      stage.setMaximized(true);&#10;    }&#10;  }&#10;&#10;  public void minimize() {&#10;&#10;    stage.setIconified(true);&#10;  }&#10;&#10;&#10;  private void playTypeWriterEffect(String text, Text textNode, double charInterval) {&#10;    textNode.setText(&quot;&quot;); // Asegurarse de que el Text esté vacío al iniciar&#10;    StringBuilder currentText = new StringBuilder();&#10;&#10;    for (int i = 0; i &lt; text.length(); i++) {&#10;      int index = i;&#10;      com.davidp.chessjourney.application.util.JavaFXGameTimerUtil.runLoop(&#10;        () -&gt; {&#10;          currentText.append(text.charAt(index)); // Añadir la siguiente letra&#10;          textNode.setText(currentText.toString());&#10;        },&#10;        javafx.util.Duration.seconds(i * charInterval)&#10;      );&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/settings/SettingsViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/settings/SettingsViewController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.ui.settings;&#10;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import com.davidp.chessjourney.application.config.GlobalEventBus;&#10;import com.davidp.chessjourney.application.domain.UserSavedAppEvent;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.usecases.GetAllTagsUseCase;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.application.usecases.SaveUserUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.control.TextField;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.layout.Pane;&#10;import javafx.util.Duration;&#10;&#10;import java.awt.*;&#10;import java.util.concurrent.atomic.AtomicInteger;&#10;&#10;public class SettingsViewController implements ScreenController {&#10;&#10;  @FXML private Button btClose;&#10;&#10;&#10;  @FXML&#10;  private Button btProfile;&#10;&#10;&#10;  @FXML private Button btSave;&#10;&#10;  @FXML private ImageView imgClose;&#10;&#10;  @FXML private TextField inEmail;&#10;&#10;  @FXML private TextField inLastName;&#10;&#10;  @FXML private TextField inName;&#10;&#10;  @FXML private Label lbUser;&#10;&#10;  @FXML private Pane pnlTitleBar1111;&#10;&#10;  @FXML private Pane pnlTitleBar11111;&#10;&#10;  @FXML private Pane pnlTitleBar11112;&#10;&#10;  @FXML private Pane rootPane;&#10;&#10;&#10;  @FXML&#10;  private Pane pnlProfile;&#10;&#10;&#10;  @FXML&#10;  private Pane pnlTags;&#10;&#10;&#10;  @FXML&#10;  private TextField inTag;&#10;&#10;  @FXML&#10;  private Button btOptionTags;&#10;&#10;&#10;  @FXML&#10;  private Button btAddTag;&#10;&#10;&#10;  private GetAllTagsUseCase getAllTagsUseCase;&#10;  private GetUserByIdUseCase getUserByIdUseCase;&#10;  private SaveUserUseCase saveUserUseCase;&#10;  private SettingsViewInputScreenData settingsViewData;&#10;&#10;  private ScreenController.ScreenStatus status;&#10;&#10;  public void setGetUserByIdUseCase(GetUserByIdUseCase getUserByIdUseCase) {&#10;&#10;    this.getUserByIdUseCase = getUserByIdUseCase;&#10;  }&#10;&#10;  public void setSaveUserUseCase(SaveUserUseCase saveUserUseCase) {&#10;&#10;    this.saveUserUseCase = saveUserUseCase;&#10;  }&#10;&#10;  public void setGetAllTagsUseCase(GetAllTagsUseCase getAllTagsUseCase) {&#10;&#10;    this.getAllTagsUseCase = getAllTagsUseCase;&#10;  }&#10;&#10;  public void setSettingsViewData(SettingsViewInputScreenData settingsViewData) {&#10;&#10;    this.settingsViewData = settingsViewData;&#10;  }&#10;&#10;  public void refreshUserInfo(final long userId) {&#10;&#10;    User user = getUserByIdUseCase.execute(userId);&#10;&#10;    inName.setText(user.getFirstname());&#10;    inLastName.setText(user.getLastname());&#10;    inEmail.setText(user.getEmail());&#10;    lbUser.setText(user.getInitials());&#10;  }&#10;&#10;  public void refreshTags() {&#10;&#10;    // pnlTags.getChildren().filtered(p-&gt; &quot;tag&quot;.equalsIgnoreCase(p.getId())).clear();&#10;&#10;    AtomicInteger pos = new AtomicInteger(10);&#10;    getAllTagsUseCase&#10;            .execute()&#10;            .forEach(&#10;                    tag -&gt; {&#10;                      Label label = new Label(tag.getName());&#10;                      label.setId(&quot;tag&quot;);&#10;                      label.getStyleClass().add(&quot;text-white-medium&quot;);&#10;                      label.setText(tag.getName());&#10;                      label.setLayoutX(10);&#10;                      label.setLayoutY(pos.get());&#10;                      pos.set(pos.get() + 25);&#10;                      pnlTags.getChildren().add(label);&#10;                    });&#10;  }&#10;&#10;  public void initialize() {&#10;&#10;    status = ScreenController.ScreenStatus.INITIALIZED;&#10;  }&#10;&#10;  @FXML&#10;  void buttonAction(ActionEvent event) {&#10;&#10;    if (event.getSource() == btSave) {&#10;&#10;      User user = buildUserFromForm();&#10;      saveUserUseCase.execute(user);&#10;      GlobalEventBus.get().post(new UserSavedAppEvent(settingsViewData.getUserId()));&#10;      rootPane.setVisible(false);&#10;    }&#10;&#10;    if (event.getSource() == btClose) {&#10;&#10;      rootPane.setVisible(false);&#10;    }&#10;&#10;    if (event.getSource() == btOptionTags) {&#10;&#10;      pnlProfile.setVisible(false);&#10;      FXGL.animationBuilder()&#10;              .duration(Duration.seconds(0.2))&#10;              .onFinished(&#10;                      () -&gt; {&#10;                        refreshTags();&#10;                        pnlTags.setVisible(true);&#10;                        //TODO set status = ....&#10;                      })&#10;              .fadeIn(pnlTags)&#10;              .buildAndPlay();&#10;    }&#10;&#10;    if (event.getSource() == btProfile) {&#10;      pnlTags.setVisible(false);&#10;      pnlProfile.setVisible(true);&#10;    }&#10;&#10;&#10;  }&#10;&#10;  private User buildUserFromForm() {&#10;&#10;    // TODO validate user data..&#10;    // long id, String email, String firstname, String lastname&#10;    User user =&#10;        new User(&#10;            settingsViewData.getUserId(),&#10;            inEmail.getText(),&#10;            inName.getText(),&#10;            inLastName.getText());&#10;    return user;&#10;  }&#10;&#10;  public void setData(InputScreenData inputData) {&#10;&#10;    SettingsViewInputScreenData settingsViewData = (SettingsViewInputScreenData) inputData;&#10;    setSettingsViewData(settingsViewData);&#10;    refreshUserInfo(settingsViewData.getUserId());&#10;&#10;    if (inputData.isLayoutInfoValid()) {&#10;&#10;      setLayout(inputData.getLayoutX(), inputData.getLayoutY());&#10;    }&#10;&#10;&#10;  }&#10;&#10;  @Override&#10;  public void setLayout(double layoutX, double layoutY) {&#10;&#10;    rootPane.setLayoutX(layoutX);&#10;    rootPane.setLayoutY(layoutY);&#10;  }&#10;&#10;  @Override&#10;  public void show() {&#10;&#10;    rootPane.setVisible(true);&#10;    rootPane.toFront();&#10;  }&#10;&#10;  public void show(InputScreenData inputData) {&#10;&#10;    setData(inputData);&#10;    status = ScreenController.ScreenStatus.VISIBLE;&#10;    show();&#10;  }&#10;&#10;  @Override&#10;  public void hide() {&#10;    status = ScreenController.ScreenStatus.HIDDEN;&#10;    rootPane.setVisible(false);&#10;  }&#10;&#10;  @Override&#10;  public boolean isVisible() {&#10;    return rootPane.isVisible();&#10;  }&#10;&#10;  @Override&#10;  public boolean isHidden() {&#10;    return !rootPane.isVisible();&#10;  }&#10;&#10;  @Override&#10;  public Pane getRootPane() {&#10;    return rootPane;&#10;  }&#10;&#10;  @Override&#10;  public ScreenStatus getStatus() {&#10;    return null;&#10;  }&#10;&#10;  @Override&#10;  public boolean isInitialized() {&#10;&#10;    return status == ScreenController.ScreenStatus.INITIALIZED;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.ui.settings;&#10;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import com.davidp.chessjourney.application.config.GlobalEventBus;&#10;import com.davidp.chessjourney.application.domain.UserSavedAppEvent;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.usecases.GetAllTagsUseCase;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.application.usecases.SaveUserUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.control.TextField;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.layout.Pane;&#10;import javafx.util.Duration;&#10;&#10;import java.awt.*;&#10;import java.util.concurrent.atomic.AtomicInteger;&#10;&#10;public class SettingsViewController implements ScreenController {&#10;&#10;  @FXML private Button btClose;&#10;&#10;&#10;  @FXML&#10;  private Button btProfile;&#10;&#10;&#10;  @FXML private Button btSave;&#10;&#10;  @FXML private ImageView imgClose;&#10;&#10;  @FXML private TextField inEmail;&#10;&#10;  @FXML private TextField inLastName;&#10;&#10;  @FXML private TextField inName;&#10;&#10;  @FXML private Label lbUser;&#10;&#10;  @FXML private Pane pnlTitleBar1111;&#10;&#10;  @FXML private Pane pnlTitleBar11111;&#10;&#10;  @FXML private Pane pnlTitleBar11112;&#10;&#10;  @FXML private Pane rootPane;&#10;&#10;&#10;  @FXML&#10;  private Pane pnlProfile;&#10;&#10;&#10;  @FXML&#10;  private Pane pnlTags;&#10;&#10;&#10;  @FXML&#10;  private TextField inTag;&#10;&#10;  @FXML&#10;  private Button btOptionTags;&#10;&#10;&#10;  @FXML&#10;  private Button btAddTag;&#10;&#10;&#10;  private GetAllTagsUseCase getAllTagsUseCase;&#10;  private GetUserByIdUseCase getUserByIdUseCase;&#10;  private SaveUserUseCase saveUserUseCase;&#10;  private SettingsViewInputScreenData settingsViewData;&#10;&#10;  private ScreenController.ScreenStatus status;&#10;&#10;  public void setGetUserByIdUseCase(GetUserByIdUseCase getUserByIdUseCase) {&#10;&#10;    this.getUserByIdUseCase = getUserByIdUseCase;&#10;  }&#10;&#10;  public void setSaveUserUseCase(SaveUserUseCase saveUserUseCase) {&#10;&#10;    this.saveUserUseCase = saveUserUseCase;&#10;  }&#10;&#10;  public void setGetAllTagsUseCase(GetAllTagsUseCase getAllTagsUseCase) {&#10;&#10;    this.getAllTagsUseCase = getAllTagsUseCase;&#10;  }&#10;&#10;  public void setSettingsViewData(SettingsViewInputScreenData settingsViewData) {&#10;&#10;    this.settingsViewData = settingsViewData;&#10;  }&#10;&#10;  public void refreshUserInfo(final long userId) {&#10;&#10;    User user = getUserByIdUseCase.execute(userId);&#10;&#10;    inName.setText(user.getFirstname());&#10;    inLastName.setText(user.getLastname());&#10;    inEmail.setText(user.getEmail());&#10;    lbUser.setText(user.getInitials());&#10;  }&#10;&#10;  public void refreshTags() {&#10;&#10;    // pnlTags.getChildren().filtered(p-&gt; &quot;tag&quot;.equalsIgnoreCase(p.getId())).clear();&#10;&#10;    AtomicInteger pos = new AtomicInteger(10);&#10;    getAllTagsUseCase&#10;            .execute()&#10;            .forEach(&#10;                    tag -&gt; {&#10;                      Label label = new Label(tag.getName());&#10;                      label.setId(&quot;tag&quot;);&#10;                      label.getStyleClass().add(&quot;text-white-medium&quot;);&#10;                      label.setText(tag.getName());&#10;                      label.setLayoutX(10);&#10;                      label.setLayoutY(pos.get());&#10;                      pos.set(pos.get() + 25);&#10;                      pnlTags.getChildren().add(label);&#10;                    });&#10;  }&#10;&#10;  public void initialize() {&#10;&#10;    status = ScreenController.ScreenStatus.INITIALIZED;&#10;  }&#10;&#10;  @FXML&#10;  void buttonAction(ActionEvent event) {&#10;&#10;    if (event.getSource() == btSave) {&#10;&#10;      User user = buildUserFromForm();&#10;      saveUserUseCase.execute(user);&#10;      GlobalEventBus.get().post(new UserSavedAppEvent(settingsViewData.getUserId()));&#10;      rootPane.setVisible(false);&#10;    }&#10;&#10;    if (event.getSource() == btClose) {&#10;&#10;      rootPane.setVisible(false);&#10;    }&#10;&#10;    if (event.getSource() == btOptionTags) {&#10;&#10;      pnlProfile.setVisible(false);&#10;      JavaFXAnimationUtil.animationBuilder()&#10;              .duration(Duration.seconds(0.2))&#10;              .onFinished(&#10;                      () -&gt; {&#10;                        refreshTags();&#10;                        pnlTags.setVisible(true);&#10;                        //TODO set status = ....&#10;                      })&#10;              .fadeIn(pnlTags)&#10;              .buildAndPlay();&#10;    }&#10;&#10;    if (event.getSource() == btProfile) {&#10;      pnlTags.setVisible(false);&#10;      pnlProfile.setVisible(true);&#10;    }&#10;&#10;&#10;  }&#10;&#10;  private User buildUserFromForm() {&#10;&#10;    // TODO validate user data..&#10;    // long id, String email, String firstname, String lastname&#10;    User user =&#10;        new User(&#10;            settingsViewData.getUserId(),&#10;            inEmail.getText(),&#10;            inName.getText(),&#10;            inLastName.getText());&#10;    return user;&#10;  }&#10;&#10;  public void setData(InputScreenData inputData) {&#10;&#10;    SettingsViewInputScreenData settingsViewData = (SettingsViewInputScreenData) inputData;&#10;    setSettingsViewData(settingsViewData);&#10;    refreshUserInfo(settingsViewData.getUserId());&#10;&#10;    if (inputData.isLayoutInfoValid()) {&#10;&#10;      setLayout(inputData.getLayoutX(), inputData.getLayoutY());&#10;    }&#10;&#10;&#10;  }&#10;&#10;  @Override&#10;  public void setLayout(double layoutX, double layoutY) {&#10;&#10;    rootPane.setLayoutX(layoutX);&#10;    rootPane.setLayoutY(layoutY);&#10;  }&#10;&#10;  @Override&#10;  public void show() {&#10;&#10;    rootPane.setVisible(true);&#10;    rootPane.toFront();&#10;  }&#10;&#10;  public void show(InputScreenData inputData) {&#10;&#10;    setData(inputData);&#10;    status = ScreenController.ScreenStatus.VISIBLE;&#10;    show();&#10;  }&#10;&#10;  @Override&#10;  public void hide() {&#10;    status = ScreenController.ScreenStatus.HIDDEN;&#10;    rootPane.setVisible(false);&#10;  }&#10;&#10;  @Override&#10;  public boolean isVisible() {&#10;    return rootPane.isVisible();&#10;  }&#10;&#10;  @Override&#10;  public boolean isHidden() {&#10;    return !rootPane.isVisible();&#10;  }&#10;&#10;  @Override&#10;  public Pane getRootPane() {&#10;    return rootPane;&#10;  }&#10;&#10;  @Override&#10;  public ScreenStatus getStatus() {&#10;    return null;&#10;  }&#10;&#10;  @Override&#10;  public boolean isInitialized() {&#10;&#10;    return status == ScreenController.ScreenStatus.INITIALIZED;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/util/JavaFXAnimationUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/util/JavaFXAnimationUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.util;&#10;&#10;import javafx.animation.FadeTransition;&#10;import javafx.scene.Node;&#10;import javafx.util.Duration;&#10;&#10;public class JavaFXAnimationUtil {&#10;    public static AnimationBuilder animationBuilder() {&#10;        return new AnimationBuilder();&#10;    }&#10;&#10;    public static class AnimationBuilder {&#10;        private Duration duration = Duration.seconds(0.2);&#10;        private Runnable onFinished;&#10;        private Node node;&#10;        private boolean fadeIn = true;&#10;&#10;        public AnimationBuilder duration(Duration duration) {&#10;            this.duration = duration;&#10;            return this;&#10;        }&#10;&#10;        public AnimationBuilder onFinished(Runnable onFinished) {&#10;            this.onFinished = onFinished;&#10;            return this;&#10;        }&#10;&#10;        public AnimationBuilder fadeIn(Node node) {&#10;            this.node = node;&#10;            this.fadeIn = true;&#10;            return this;&#10;        }&#10;&#10;        public AnimationBuilder fadeOut(Node node) {&#10;            this.node = node;&#10;            this.fadeIn = false;&#10;            return this;&#10;        }&#10;&#10;        public void buildAndPlay() {&#10;            if (node == null) return;&#10;            FadeTransition ft = new FadeTransition(duration, node);&#10;            if (fadeIn) {&#10;                ft.setFromValue(0.0);&#10;                ft.setToValue(1.0);&#10;            } else {&#10;                ft.setFromValue(1.0);&#10;                ft.setToValue(0.0);&#10;            }&#10;            if (onFinished != null) {&#10;                ft.setOnFinished(e -&gt; onFinished.run());&#10;            }&#10;            ft.play();&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.util;&#10;&#10;import javafx.animation.FadeTransition;&#10;import javafx.animation.KeyFrame;&#10;import javafx.animation.SequentialTransition;&#10;import javafx.animation.Timeline;&#10;import javafx.animation.TranslateTransition;&#10;import javafx.scene.Node;&#10;import javafx.scene.layout.Pane;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.shape.Rectangle;&#10;import javafx.util.Duration;&#10;&#10;import java.util.Random;&#10;&#10;public class JavaFXAnimationUtil {&#10;    public static AnimationBuilder animationBuilder() {&#10;        return new AnimationBuilder();&#10;    }&#10;&#10;    public static class AnimationBuilder {&#10;        private Duration duration = Duration.seconds(0.2);&#10;        private Runnable onFinished;&#10;        private Node node;&#10;        private boolean fadeIn = true;&#10;&#10;        public AnimationBuilder duration(Duration duration) {&#10;            this.duration = duration;&#10;            return this;&#10;        }&#10;&#10;        public AnimationBuilder onFinished(Runnable onFinished) {&#10;            this.onFinished = onFinished;&#10;            return this;&#10;        }&#10;&#10;        public AnimationBuilder fadeIn(Node node) {&#10;            this.node = node;&#10;            this.fadeIn = true;&#10;            return this;&#10;        }&#10;&#10;        public AnimationBuilder fadeOut(Node node) {&#10;            this.node = node;&#10;            this.fadeIn = false;&#10;            return this;&#10;        }&#10;&#10;        public void buildAndPlay() {&#10;            if (node == null) return;&#10;            FadeTransition ft = new FadeTransition(duration, node);&#10;            if (fadeIn) {&#10;                ft.setFromValue(0.0);&#10;                ft.setToValue(1.0);&#10;            } else {&#10;                ft.setFromValue(1.0);&#10;                ft.setToValue(0.0);&#10;            }&#10;            if (onFinished != null) {&#10;                ft.setOnFinished(e -&gt; onFinished.run());&#10;            }&#10;            ft.play();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Efecto de niebla animada con píxeles grises ascendentes.&#10;     *&#10;     * @param targetPane      Pane donde se dibuja la niebla&#10;     * @param durationSegundos Duración total de la animación en segundos&#10;     */&#10;    public static void playFogEffect(Pane targetPane, double durationSegundos) {&#10;        Random random = new Random();&#10;        int width = (int) targetPane.getWidth();&#10;        int height = (int) targetPane.getHeight();&#10;        int numClouds = 6 + random.nextInt(4); // 6-9 agrupaciones&#10;        SequentialTransition allClouds = new SequentialTransition();&#10;        for (int c = 0; c &lt; numClouds; c++) {&#10;            int cloudWidth = 80 + random.nextInt(60); // 80-140 px&#10;            int cloudHeight = 30 + random.nextInt(20); // 30-50 px&#10;            int baseX = random.nextInt(Math.max(1, width - cloudWidth));&#10;            int baseY = height - 30 - random.nextInt(30); // parte baja&#10;            int density = 18 + random.nextInt(10); // píxeles por nube&#10;            for (int i = 0; i &lt; density; i++) {&#10;                int px = baseX + random.nextInt(cloudWidth);&#10;                int py = baseY + random.nextInt(cloudHeight);&#10;                int size = 3 + random.nextInt(4); // 3-6 px&#10;                Rectangle pixel = new Rectangle(size, size, Color.rgb(180 + random.nextInt(40), 180 + random.nextInt(40), 180 + random.nextInt(40), 0.45 + 0.25 * random.nextDouble()));&#10;                pixel.setArcWidth(size * 0.7);&#10;                pixel.setArcHeight(size * 0.7);&#10;                pixel.setX(px);&#10;                pixel.setY(py);&#10;                targetPane.getChildren().add(pixel);&#10;                double moveY = -60 - random.nextInt(40); // suben 60-100px&#10;                double delay = random.nextDouble() * (durationSegundos * 0.5); // dispersión&#10;                TranslateTransition tt = new TranslateTransition(Duration.seconds(durationSegundos * (0.7 + 0.5 * random.nextDouble())), pixel);&#10;                tt.setFromY(0);&#10;                tt.setToY(moveY);&#10;                tt.setDelay(Duration.seconds(delay));&#10;                tt.setOnFinished(e -&gt; targetPane.getChildren().remove(pixel));&#10;                allClouds.getChildren().add(tt);&#10;            }&#10;        }&#10;        allClouds.setOnFinished(e -&gt; {}); // nada extra&#10;        allClouds.play();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/util/JavaFXGameTimerUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/util/JavaFXGameTimerUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.util;&#10;&#10;import javafx.animation.Animation;&#10;import javafx.animation.KeyFrame;&#10;import javafx.util.Duration;&#10;&#10;    public static void runLoop(Runnable action, Duration interval) {&#10;        Timeline timeline = new Timeline(new KeyFrame(interval, e -&gt; action.run()));&#10;        timeline.setCycleCount(Timeline.INDEFINITE);&#10;        timeline.play();&#10;        addTimer(timeline);&#10;    }&#10;}&#10;import java.util.List;&#10;&#10;public class JavaFXGameTimerUtil {&#10;    private static final List&lt;Animation&gt; activeTimers = new ArrayList&lt;&gt;();&#10;&#10;    public static void addTimer(Animation timer) {&#10;        activeTimers.add(timer);&#10;    }&#10;&#10;    public static void clear() {&#10;        for (Animation timer : activeTimers) {&#10;            timer.stop();&#10;        }&#10;        activeTimers.clear();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.util;&#10;&#10;import javafx.animation.Animation;&#10;import javafx.animation.KeyFrame;&#10;import javafx.animation.Timeline;&#10;import javafx.util.Duration;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class JavaFXGameTimerUtil {&#10;    private static final List&lt;Animation&gt; activeTimers = new ArrayList&lt;&gt;();&#10;&#10;    public static void runLoop(Runnable action, Duration interval) {&#10;        Timeline timeline = new Timeline(new KeyFrame(interval, e -&gt; action.run()));&#10;        timeline.setCycleCount(Timeline.INDEFINITE);&#10;        timeline.play();&#10;        addTimer(timeline);&#10;    }&#10;&#10;    public static void addTimer(Animation timer) {&#10;        activeTimers.add(timer);&#10;    }&#10;&#10;    public static void clear() {&#10;        for (Animation timer : activeTimers) {&#10;            timer.stop();&#10;        }&#10;        activeTimers.clear();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
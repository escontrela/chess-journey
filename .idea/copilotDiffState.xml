<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/NombreDeTuClase.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/NombreDeTuClase.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db/quotes.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db/quotes.sql" />
              <option name="updatedContent" value="CREATE TABLE IF NOT EXISTS quotes (&#10;    id SERIAL PRIMARY KEY,&#10;    text VARCHAR(500) NOT NULL,&#10;    author VARCHAR(100) NOT NULL&#10;);&#10;&#10;-- Insertar algunas quotes iniciales&#10;INSERT INTO quotes (text, author) VALUES &#10;('Some people think that if their opponent plays a beautiful game, it''s okay to lose. I don''t. You have to be merciless.', 'Magnus Carlsen'),&#10;('Chess is life in miniature. Chess is struggle, chess is battles.', 'Garry Kasparov'),&#10;('Every chess master was once a beginner.', 'Irving Chernev'),&#10;('Chess is the gymnasium of the mind.', 'Blaise Pascal'),&#10;('When you see a good move, look for a better one.', 'Emanuel Lasker');" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://www.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;&lt;groupId&gt;com.davidp.chessjourney&lt;/groupId&gt;&#10;&lt;artifactId&gt;ChessJourney&lt;/artifactId&gt;&#10;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;repositories&gt;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;jitpack.io&lt;/id&gt;&#10;            &lt;url&gt;https://jitpack.io&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;clojars.org&lt;/id&gt;&#10;            &lt;url&gt;https://repo.clojars.org/&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;&#10;    &lt;/repositories&gt;&#10;&#10;&lt;dependencies&gt;&#10;        &lt;!-- SLF4J API --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;1.7.30&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Logback Classic Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;!-- FXGL --&gt;&#10;    &lt;!-- https://mvnrepository.com/artifact/com.github.almasb/FXGL --&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;        &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;&#10;        &lt;version&gt;22-ea+11&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;        &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;&#10;        &lt;version&gt;22-ea+11&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;        &lt;artifactId&gt;javafx-media&lt;/artifactId&gt;&#10;        &lt;version&gt;22-ea+11&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.kordamp.bootstrapfx&lt;/groupId&gt;&#10;        &lt;artifactId&gt;bootstrapfx-core&lt;/artifactId&gt;&#10;        &lt;version&gt;0.4.0&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;&#10;        &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;&#10;        &lt;version&gt;5.0.1&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;version&gt;42.2.20&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.google.guava&lt;/groupId&gt;&#10;        &lt;artifactId&gt;guava&lt;/artifactId&gt;&#10;        &lt;version&gt;31.1-jre&lt;/version&gt; &lt;!-- o la mÃ¡s reciente --&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.github.almasb&lt;/groupId&gt;&#10;        &lt;artifactId&gt;fxgl&lt;/artifactId&gt;&#10;        &lt;version&gt;17.3&lt;/version&gt;&#10;        &lt;exclusions&gt;&#10;            &lt;exclusion&gt;&#10;                &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                &lt;artifactId&gt;*&lt;/artifactId&gt;&#10;            &lt;/exclusion&gt;&#10;        &lt;/exclusions&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;        &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;        &lt;version&gt;${junit.version}&lt;/version&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;        &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;        &lt;version&gt;${junit.version}&lt;/version&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;!-- Chesspresso --&gt;&#10;    &lt;!-- https://mvnrepository.com/artifact/com._0xab/chesspresso --&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com._0xab&lt;/groupId&gt;&#10;        &lt;artifactId&gt;chesspresso&lt;/artifactId&gt;&#10;        &lt;version&gt;0.9.2&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;&#10;&#10;    &lt;!-- PostgreSQL JDBC Driver --&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;version&gt;42.2.20&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;!-- JUnit for testing --&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;junit&lt;/groupId&gt;&#10;        &lt;artifactId&gt;junit&lt;/artifactId&gt;&#10;        &lt;version&gt;4.13.2&lt;/version&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;io.javalin&lt;/groupId&gt;&#10;      &lt;artifactId&gt;javalin&lt;/artifactId&gt;&#10;      &lt;version&gt;5.6.2&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;&lt;/dependencies&gt;&#10;&#10;&lt;build&gt;&#10;    &lt;plugins&gt;&#10;        &lt;plugin&gt;&#10;            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;version&gt;3.8.1&lt;/version&gt;&#10;            &lt;configuration&gt;&#10;                &lt;source&gt;22&lt;/source&gt;&#10;                &lt;target&gt;22&lt;/target&gt;&#10;            &lt;/configuration&gt;&#10;        &lt;/plugin&gt;&#10;        &lt;plugin&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;&#10;            &lt;version&gt;0.0.8&lt;/version&gt;&#10;            &lt;executions&gt;&#10;                &lt;execution&gt;&#10;                    &lt;!-- Default configuration for running with: mvn clean javafx:run --&gt;&#10;                    &lt;id&gt;default-cli&lt;/id&gt;&#10;                    &lt;configuration&gt;&#10;                        &lt;mainClass&gt;com.davidp.chessjourney.ChessJourneyAppJavaFx&lt;/mainClass&gt;&#10;                        &lt;launcher&gt;app&lt;/launcher&gt;&#10;                        &lt;jlinkZipName&gt;app&lt;/jlinkZipName&gt;&#10;                        &lt;jlinkImageName&gt;app&lt;/jlinkImageName&gt;&#10;                        &lt;noManPages&gt;true&lt;/noManPages&gt;&#10;                        &lt;stripDebug&gt;true&lt;/stripDebug&gt;&#10;                        &lt;noHeaderFiles&gt;true&lt;/noHeaderFiles&gt;&#10;                    &lt;/configuration&gt;&#10;                &lt;/execution&gt;&#10;            &lt;/executions&gt;&#10;        &lt;/plugin&gt;&#10;        &lt;plugin&gt;&#10;            &lt;groupId&gt;com.diffplug.spotless&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spotless-maven-plugin&lt;/artifactId&gt;&#10;            &lt;version&gt;2.17.5&lt;/version&gt;&#10;            &lt;executions&gt;&#10;                &lt;execution&gt;&#10;                    &lt;goals&gt;&#10;                        &lt;goal&gt;apply&lt;/goal&gt;&#10;                    &lt;/goals&gt;&#10;                    &lt;phase&gt;verify&lt;/phase&gt;&#10;                &lt;/execution&gt;&#10;            &lt;/executions&gt;&#10;            &lt;configuration&gt;&#10;                &lt;java&gt;&#10;                    &lt;googleJavaFormat&gt;&#10;                        &lt;version&gt;1.7&lt;/version&gt;&#10;                    &lt;/googleJavaFormat&gt;&#10;                &lt;/java&gt;&#10;            &lt;/configuration&gt;&#10;        &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;&lt;/build&gt;&#10;&#10;&#10;    &lt;properties&gt;&#10;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;junit.version&gt;5.10.0&lt;/junit.version&gt;&#10;        &lt;maven.compiler.source&gt;22&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;22&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://www.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;&lt;groupId&gt;com.davidp.chessjourney&lt;/groupId&gt;&#10;&lt;artifactId&gt;ChessJourney&lt;/artifactId&gt;&#10;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;repositories&gt;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;jitpack.io&lt;/id&gt;&#10;            &lt;url&gt;https://jitpack.io&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;clojars.org&lt;/id&gt;&#10;            &lt;url&gt;https://repo.clojars.org/&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;&#10;    &lt;/repositories&gt;&#10;&#10;&lt;dependencies&gt;&#10;        &lt;!-- SLF4J API --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;1.7.30&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Logback Classic Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;!-- FXGL --&gt;&#10;    &lt;!-- https://mvnrepository.com/artifact/com.github.almasb/FXGL --&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;        &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;&#10;        &lt;version&gt;22-ea+11&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;        &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;&#10;        &lt;version&gt;22-ea+11&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;        &lt;artifactId&gt;javafx-media&lt;/artifactId&gt;&#10;        &lt;version&gt;22-ea+11&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.kordamp.bootstrapfx&lt;/groupId&gt;&#10;        &lt;artifactId&gt;bootstrapfx-core&lt;/artifactId&gt;&#10;        &lt;version&gt;0.4.0&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;&#10;        &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;&#10;        &lt;version&gt;5.0.1&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;version&gt;42.2.20&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.google.guava&lt;/groupId&gt;&#10;        &lt;artifactId&gt;guava&lt;/artifactId&gt;&#10;        &lt;version&gt;31.1-jre&lt;/version&gt; &lt;!-- o la mÃ¡s reciente --&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.github.almasb&lt;/groupId&gt;&#10;        &lt;artifactId&gt;fxgl&lt;/artifactId&gt;&#10;        &lt;version&gt;17.3&lt;/version&gt;&#10;        &lt;exclusions&gt;&#10;            &lt;exclusion&gt;&#10;                &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                &lt;artifactId&gt;*&lt;/artifactId&gt;&#10;            &lt;/exclusion&gt;&#10;        &lt;/exclusions&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;        &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;        &lt;version&gt;${junit.version}&lt;/version&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;        &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;        &lt;version&gt;${junit.version}&lt;/version&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;!-- Chesspresso --&gt;&#10;    &lt;!-- https://mvnrepository.com/artifact/com._0xab/chesspresso --&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com._0xab&lt;/groupId&gt;&#10;        &lt;artifactId&gt;chesspresso&lt;/artifactId&gt;&#10;        &lt;version&gt;0.9.2&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;&#10;&#10;    &lt;!-- PostgreSQL JDBC Driver --&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;version&gt;42.2.20&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;!-- JUnit for testing --&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;junit&lt;/groupId&gt;&#10;        &lt;artifactId&gt;junit&lt;/artifactId&gt;&#10;        &lt;version&gt;4.13.2&lt;/version&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;io.javalin&lt;/groupId&gt;&#10;      &lt;artifactId&gt;javalin&lt;/artifactId&gt;&#10;      &lt;version&gt;5.6.2&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;&#10;        &lt;artifactId&gt;gson&lt;/artifactId&gt;&#10;        &lt;version&gt;2.10.1&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;&lt;/dependencies&gt;&#10;&#10;&lt;build&gt;&#10;    &lt;plugins&gt;&#10;        &lt;plugin&gt;&#10;            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;version&gt;3.8.1&lt;/version&gt;&#10;            &lt;configuration&gt;&#10;                &lt;source&gt;22&lt;/source&gt;&#10;                &lt;target&gt;22&lt;/target&gt;&#10;            &lt;/configuration&gt;&#10;        &lt;/plugin&gt;&#10;        &lt;plugin&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;&#10;            &lt;version&gt;0.0.8&lt;/version&gt;&#10;            &lt;executions&gt;&#10;                &lt;execution&gt;&#10;                    &lt;!-- Default configuration for running with: mvn clean javafx:run --&gt;&#10;                    &lt;id&gt;default-cli&lt;/id&gt;&#10;                    &lt;configuration&gt;&#10;                        &lt;mainClass&gt;com.davidp.chessjourney.ChessJourneyAppJavaFx&lt;/mainClass&gt;&#10;                        &lt;launcher&gt;app&lt;/launcher&gt;&#10;                        &lt;jlinkZipName&gt;app&lt;/jlinkZipName&gt;&#10;                        &lt;jlinkImageName&gt;app&lt;/jlinkImageName&gt;&#10;                        &lt;noManPages&gt;true&lt;/noManPages&gt;&#10;                        &lt;stripDebug&gt;true&lt;/stripDebug&gt;&#10;                        &lt;noHeaderFiles&gt;true&lt;/noHeaderFiles&gt;&#10;                    &lt;/configuration&gt;&#10;                &lt;/execution&gt;&#10;            &lt;/executions&gt;&#10;        &lt;/plugin&gt;&#10;        &lt;plugin&gt;&#10;            &lt;groupId&gt;com.diffplug.spotless&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spotless-maven-plugin&lt;/artifactId&gt;&#10;            &lt;version&gt;2.17.5&lt;/version&gt;&#10;            &lt;executions&gt;&#10;                &lt;execution&gt;&#10;                    &lt;goals&gt;&#10;                        &lt;goal&gt;apply&lt;/goal&gt;&#10;                    &lt;/goals&gt;&#10;                    &lt;phase&gt;verify&lt;/phase&gt;&#10;                &lt;/execution&gt;&#10;            &lt;/executions&gt;&#10;            &lt;configuration&gt;&#10;                &lt;java&gt;&#10;                    &lt;googleJavaFormat&gt;&#10;                        &lt;version&gt;1.7&lt;/version&gt;&#10;                    &lt;/googleJavaFormat&gt;&#10;                &lt;/java&gt;&#10;            &lt;/configuration&gt;&#10;        &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;&lt;/build&gt;&#10;&#10;&#10;    &lt;properties&gt;&#10;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;junit.version&gt;5.10.0&lt;/junit.version&gt;&#10;        &lt;maven.compiler.source&gt;22&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;22&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/ChessJourneyAppJavaFx.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/ChessJourneyAppJavaFx.java" />
              <option name="originalContent" value="package com.davidp.chessjourney;&#10;&#10;import com.davidp.chessjourney.api.ActiveUserController;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;import com.davidp.chessjourney.application.ui.main.MainSceneController;&#10;import javafx.application.Application;&#10;import javafx.scene.Scene;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.paint.Color;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;&#10;/** @see &lt;a href=&quot;https://github.com/AlmasB/FXGL&quot;&gt;FXGL framework&lt;/a&gt; */&#10;/**&#10; * @see &lt;a&#10; *     href=&quot;https://fonts.google.com/icons?selected=Material+Symbols+Outlined:close:FILL@0;wght@400;GRAD@0;opsz@20&amp;icon.query=close&amp;icon.size=18&amp;icon.color=%23353535&quot;&gt;Google&#10; *     Material design&lt;/a&gt;&#10; */&#10;&#10;/** @see &lt;a href=&quot;https://coolors.co/palettes/trending&quot;&gt;Coolors&lt;/a&gt; */&#10;public class ChessJourneyAppJavaFx extends Application {&#10;&#10;  GridPane chessBoard = null;&#10;  String fenPosition = &quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;;&#10;&#10;  private static Stage primaryStage;&#10;  private ActiveUserController activeUserController;&#10;&#10;  /** Old Code * */&#10;  public static void main(String[] args) {&#10;&#10;    launch(args);&#10;  }&#10;&#10;  @Override&#10;  public void start(Stage stage) throws Exception {&#10;&#10;    try {&#10;      // Iniciar el servidor REST&#10;      initializeRestServer();&#10;&#10;      primaryStage = stage;&#10;      primaryStage.setTitle(&quot;Chess Journey&quot;);&#10;      primaryStage.initStyle(StageStyle.TRANSPARENT);&#10;&#10;      var mainScreenController =&#10;          ScreenFactory.getInstance().createScreen(ScreenFactory.Screens.MAIN_STAGE);&#10;      Pane root = mainScreenController.getRootPane();&#10;      ((MainSceneController) mainScreenController).setStage(primaryStage);&#10;&#10;      Scene scene = new Scene(root);&#10;      primaryStage.setScene(scene);&#10;      scene.setFill(Color.TRANSPARENT);&#10;&#10;      // Efecto niebla al iniciar&#10;      /*&#10;      root.layoutBoundsProperty().addListener((obs, oldVal, newVal) -&gt; {&#10;        if (newVal.getWidth() &gt; 0 &amp;&amp; newVal.getHeight() &gt; 0) {&#10;           JavaFXAnimationUtil.playFogEffect(root, 10.0);&#10;        }&#10;      });&#10;       */&#10;      primaryStage.show();&#10;&#10;      System.out.println(&#10;          String.format(&quot;UserId: %s&quot;, AppProperties.getInstance().getActiveUserId()));&#10;&#10;    } catch (Exception e) {&#10;&#10;      e.printStackTrace();&#10;    }&#10;  }&#10;&#10;  private void initializeRestServer() {&#10;&#10;    activeUserController = new ActiveUserController(UseCaseFactory.createGetUserByIdUseCase());&#10;    activeUserController.start(8080); // Puerto 8080 para el servidor REST&#10;  }&#10;&#10;  @Override&#10;  public void stop() throws Exception {&#10;    if (activeUserController != null) {&#10;      activeUserController.stop();&#10;    }&#10;    super.stop();&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney;&#10;&#10;import com.davidp.chessjourney.api.ActiveUserController;&#10;import com.davidp.chessjourney.api.ApiConfig;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;import com.davidp.chessjourney.application.ui.main.MainSceneController;&#10;import javafx.application.Application;&#10;import javafx.scene.Scene;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.paint.Color;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;&#10;import java.io.IOException;&#10;&#10;/** @see &lt;a href=&quot;https://github.com/AlmasB/FXGL&quot;&gt;FXGL framework&lt;/a&gt; */&#10;/**&#10; * @see &lt;a&#10; *     href=&quot;https://fonts.google.com/icons?selected=Material+Symbols+Outlined:close:FILL@0;wght@400;GRAD@0;opsz@20&amp;icon.query=close&amp;icon.size=18&amp;icon.color=%23353535&quot;&gt;Google&#10; *     Material design&lt;/a&gt;&#10; */&#10;&#10;/** @see &lt;a href=&quot;https://coolors.co/palettes/trending&quot;&gt;Coolors&lt;/a&gt; */&#10;public class ChessJourneyAppJavaFx extends Application {&#10;&#10;  GridPane chessBoard = null;&#10;  String fenPosition = &quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;;&#10;&#10;  private static Stage primaryStage;&#10;  private ActiveUserController activeUserController;&#10;  private ApiConfig apiConfig;&#10;  private static final int API_PORT = 7070;&#10;&#10;  /** Old Code * */&#10;  public static void main(String[] args) {&#10;&#10;    launch(args);&#10;  }&#10;&#10;  @Override&#10;  public void start(Stage stage) throws Exception {&#10;&#10;    try {&#10;      // Iniciar el servidor REST&#10;      initializeRestServer();&#10;&#10;      // Iniciar el API&#10;      apiConfig = new ApiConfig();&#10;      apiConfig.start(API_PORT);&#10;&#10;      primaryStage = stage;&#10;      primaryStage.setTitle(&quot;Chess Journey&quot;);&#10;      primaryStage.initStyle(StageStyle.TRANSPARENT);&#10;&#10;      var mainScreenController =&#10;          ScreenFactory.getInstance().createScreen(ScreenFactory.Screens.MAIN_STAGE);&#10;      Pane root = mainScreenController.getRootPane();&#10;      ((MainSceneController) mainScreenController).setStage(primaryStage);&#10;&#10;      Scene scene = new Scene(root);&#10;      primaryStage.setScene(scene);&#10;      scene.setFill(Color.TRANSPARENT);&#10;&#10;      // Efecto niebla al iniciar&#10;      /*&#10;      root.layoutBoundsProperty().addListener((obs, oldVal, newVal) -&gt; {&#10;        if (newVal.getWidth() &gt; 0 &amp;&amp; newVal.getHeight() &gt; 0) {&#10;           JavaFXAnimationUtil.playFogEffect(root, 10.0);&#10;        }&#10;      });&#10;       */&#10;      primaryStage.show();&#10;&#10;      System.out.println(&#10;          String.format(&quot;UserId: %s&quot;, AppProperties.getInstance().getActiveUserId()));&#10;&#10;    } catch (Exception e) {&#10;&#10;      e.printStackTrace();&#10;    }&#10;  }&#10;&#10;  private void initializeRestServer() {&#10;&#10;    activeUserController = new ActiveUserController(UseCaseFactory.createGetUserByIdUseCase());&#10;    activeUserController.start(8080); // Puerto 8080 para el servidor REST&#10;  }&#10;&#10;  @Override&#10;  public void stop() throws Exception {&#10;    if (activeUserController != null) {&#10;      activeUserController.stop();&#10;    }&#10;    if (apiConfig != null) {&#10;      apiConfig.stop();&#10;    }&#10;    super.stop();&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ActiveUserApiController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ActiveUserApiController.java" />
              <option name="updatedContent" value="package com.davidp.chessjourney.api;&#10;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import io.javalin.Javalin;&#10;import io.javalin.http.Context;&#10;&#10;public class ActiveUserApiController {&#10;    private final GetUserByIdUseCase getUserByIdUseCase;&#10;&#10;    public ActiveUserApiController(GetUserByIdUseCase getUserByIdUseCase) {&#10;        this.getUserByIdUseCase = getUserByIdUseCase;&#10;    }&#10;&#10;    public void registerRoutes(Javalin app) {&#10;        app.get(&quot;/chessjourney/activeUser&quot;, this::getActiveUser);&#10;    }&#10;&#10;    private void getActiveUser(Context ctx) {&#10;        long activeUserId = AppProperties.getInstance().getActiveUserId();&#10;        User user = getUserByIdUseCase.execute(activeUserId);&#10;        if (user == null) {&#10;            ctx.status(404).result(&quot;No active user found&quot;);&#10;            return;&#10;        }&#10;        ctx.json(new UserResponse(user));&#10;    }&#10;&#10;    public static class UserResponse {&#10;        public long id;&#10;        public String firstname;&#10;        public String lastname;&#10;        public String email;&#10;        public String initials;&#10;&#10;        public UserResponse(User user) {&#10;            this.id = user.getId();&#10;            this.firstname = user.getFirstname();&#10;            this.lastname = user.getLastname();&#10;            this.email = user.getEmail();&#10;            this.initials = user.getInitials();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ApiConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/ApiConfig.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.api;&#10;&#10;import io.javalin.Javalin;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;&#10;public class ApiConfig {&#10;&#10;    private static volatile ApiConfig instance = null;&#10;&#10;    private final Javalin app;&#10;&#10;    private ApiConfig() {&#10;&#10;        this.app = Javalin.create();&#10;        configureRoutes();&#10;    }&#10;&#10;    public static ApiConfig getInstance() {&#10;&#10;        if (instance == null) {&#10;            synchronized (ApiConfig.class) {&#10;                if (instance == null) {&#10;&#10;                    instance = new ApiConfig();&#10;                }&#10;            }&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private void configureRoutes() {&#10;&#10;        QuoteController quoteController = new QuoteController(UseCaseFactory.createSaveQuoteUseCase());&#10;&#10;        ActiveUserController activeUserController = new ActiveUserController(UseCaseFactory.createGetUserByIdUseCase());&#10;&#10;        app.post(&quot;/chessjourney/quote&quot;, quoteController.saveQuote);&#10;        app.get(&quot;/chessjourney/activeUser&quot;, activeUserController.getActiveUser);&#10;&#10;    }&#10;&#10;    public void start(int port) {&#10;&#10;        app.start(port);&#10;    }&#10;&#10;    public void stop() {&#10;&#10;        app.stop();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.davidp.chessjourney.api;&#10;&#10;import io.javalin.Javalin;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.application.usecases.SaveQuoteUseCase;&#10;&#10;public class ApiConfig {&#10;&#10;    private static volatile ApiConfig instance = null;&#10;&#10;    private final Javalin app;&#10;    private final QuoteController quoteController;&#10;    private final ActiveUserController activeUserController;&#10;&#10;    private ApiConfig(SaveQuoteUseCase saveQuoteUseCase, GetUserByIdUseCase getUserByIdUseCase) {&#10;        this.app = Javalin.create();&#10;        this.quoteController = new QuoteController(saveQuoteUseCase);&#10;        this.activeUserController = new ActiveUserController(getUserByIdUseCase);&#10;        configureRoutes();&#10;    }&#10;&#10;    public static ApiConfig getInstance() {&#10;        if (instance == null) {&#10;            synchronized (ApiConfig.class) {&#10;                if (instance == null) {&#10;                    SaveQuoteUseCase saveQuoteUseCase = UseCaseFactory.createSaveQuoteUseCase();&#10;                    GetUserByIdUseCase getUserByIdUseCase = UseCaseFactory.createGetUserByIdUseCase();&#10;                    instance = new ApiConfig(saveQuoteUseCase, getUserByIdUseCase);&#10;                }&#10;            }&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private void configureRoutes() {&#10;        app.post(&quot;/chessjourney/quote&quot;, quoteController.saveQuote);&#10;        app.get(&quot;/chessjourney/activeUser&quot;, activeUserController.getActiveUser);&#10;    }&#10;&#10;    public void start(int port) {&#10;        app.start(port);&#10;    }&#10;&#10;    public void stop() {&#10;        app.stop();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/QuoteController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/api/QuoteController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.api;&#10;&#10;import com.davidp.chessjourney.application.usecases.SaveQuoteUseCase;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import io.javalin.http.Handler;&#10;&#10;public class QuoteController {&#10;&#10;    private SaveQuoteUseCase saveQuoteUseCase = null;&#10;&#10;    public QuoteController(SaveQuoteUseCase saveQuoteUseCase) {&#10;&#10;        this.saveQuoteUseCase = saveQuoteUseCase;&#10;    }&#10;&#10;    public Handler saveQuote = ctx -&gt; {&#10;&#10;        QuoteRequest request = ctx.bodyAsClass(QuoteRequest.class);&#10;        Quote savedQuote = saveQuoteUseCase.execute(request.text, request.author);&#10;        ctx.json(savedQuote);&#10;    };&#10;&#10;    private static class QuoteRequest {&#10;&#10;        public String text;&#10;        public String author;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.api;&#10;&#10;import com.davidp.chessjourney.application.usecases.SaveQuoteUseCase;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import io.javalin.http.Handler;&#10;&#10;/**&#10; * Controlador encargado de gestionar las operaciones relacionadas con las citas (quotes).&#10; * Expone el endpoint para guardar una cita utilizando el caso de uso correspondiente.&#10; */&#10;public class QuoteController {&#10;&#10;    private SaveQuoteUseCase saveQuoteUseCase = null;&#10;&#10;    public QuoteController(SaveQuoteUseCase saveQuoteUseCase) {&#10;&#10;        this.saveQuoteUseCase = saveQuoteUseCase;&#10;    }&#10;&#10;    public Handler saveQuote = ctx -&gt; {&#10;&#10;        QuoteRequest request = ctx.bodyAsClass(QuoteRequest.class);&#10;        Quote savedQuote = saveQuoteUseCase.execute(request.text, request.author);&#10;        ctx.json(savedQuote);&#10;    };&#10;&#10;    private static class QuoteRequest {&#10;&#10;        public String text;&#10;        public String author;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil {&#10;    private final EnumMap&lt;Enum&lt;?&gt;, AudioClip&gt; soundCache = new EnumMap&lt;&gt;(Enum.class);&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public &lt;E extends Enum&lt;E&gt;&gt; void preloadSounds(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(Enum&lt;?&gt; type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;E&gt; {&#10;        String getResourceName(E type);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil&lt;E extends Enum&lt;E&gt;&gt; {&#10;    private final EnumMap&lt;E, AudioClip&gt; soundCache;&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public JavaFXSoundUtil(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        soundCache = new EnumMap&lt;&gt;(enumClass);&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(E type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;T&gt; {&#10;        String getResourceName(T type);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil();&#10;    soundUtil.preloadSounds(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil&lt;SoundType&gt; soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil&lt;&gt;(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/UseCaseFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/UseCaseFactory.java" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import com.davidp.chessjourney.application.usecases.*;&#10;import com.davidp.chessjourney.domain.*;&#10;import com.davidp.chessjourney.infrastructure.database.*;&#10;&#10;public class UseCaseFactory {&#10;&#10;    // ... existing code for other use cases ...&#10;&#10;    public static GetRandomQuoteUseCase createGetRandomQuoteUseCase() {&#10;        return new GetRandomQuoteUseCase(createQuoteRepository());&#10;    }&#10;&#10;    public static SaveQuoteUseCase createSaveQuoteUseCase() {&#10;        return new SaveQuoteUseCase(createQuoteRepository());&#10;    }&#10;&#10;    private static QuoteRepository createQuoteRepository() {&#10;        return new QuoteRepositoryImpl(DatabaseConnection.getConnection());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/main/MainSceneController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/main/MainSceneController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.ui.main;&#10;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.config.GlobalEventBus;&#10;import com.davidp.chessjourney.application.domain.*;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory.Screens;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import com.davidp.chessjourney.application.ui.settings.SettingsViewInputScreenData;&#10;import com.davidp.chessjourney.application.ui.user.UserStatsInputScreenData;&#10;import com.davidp.chessjourney.application.ui.util.FXAnimationUtil;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import com.google.common.eventbus.Subscribe;&#10;import java.awt.*;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.io.IOException;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import javafx.application.Platform;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.Node;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.Pane;&#10;import javafx.scene.layout.StackPane;&#10;import javafx.scene.text.Text;&#10;import javafx.stage.Stage;&#10;&#10;/**&#10; * This class is responsible for managing the main scene of the application, the main scene controls&#10; * all the features and windows dynamics of the application It is responsible for managing the main&#10; * menu, the settings menu, the board, and the game.&#10; */&#10;public class MainSceneController implements ScreenController {&#10;&#10;  @FXML private Button btClose;&#10;&#10;  @FXML private Button btLeft;&#10;&#10;  @FXML private Button btRight;&#10;&#10;  @FXML private Button btSettings;&#10;&#10;  @FXML private Label lbUserInitials;&#10;&#10;  @FXML private Pane mainPane;&#10;&#10;  @FXML private Pane pnlMessage;&#10;&#10;  @FXML private StackPane pnlMenu;&#10;&#10;  @FXML private ImageView imgClose;&#10;&#10;  @FXML private ImageView imgSettings;&#10;&#10;  @FXML private ImageView imgLogo;&#10;&#10;&#10;  @FXML&#10;  private Text lblPractice;&#10;&#10;  @FXML&#10;  private Text lblChessboard;&#10;&#10;  @FXML&#10;  private HBox taskBar;&#10;&#10;  @FXML&#10;  private StackPane taskOption_analysis;&#10;&#10;  @FXML&#10;  private StackPane taskOption_games;&#10;&#10;  @FXML&#10;  private StackPane taskOption_stats;&#10;&#10;  @FXML&#10;  private StackPane taskOption_settings;&#10;&#10;  // Variables para guardar la posiciÃ³n (offset) dentro de la ventana al pulsar el ratÃ³n&#10;  private double xOffset = 0;&#10;  private double yOffset = 0;&#10;&#10;  // This map is used to cache the screens that are created.&#10;  private final Map&lt;Screens, ScreenController&gt; screenManager = new HashMap&lt;&gt;();&#10;  private static final Point MENU_POSITION = new Point(20, 460);&#10;  private static final Point SETTINGS_POSITION = new Point(320, 180);&#10;  private static final Point BOARD_POSITION = new Point(10, 10);&#10;  private static final Point MEMORY_GAME_POSITION = new Point(10, 10);&#10;  private static final Point DEFEND_GAME_POSITION = new Point(10, 10);&#10;  private static final Point CHANGE_USER_POSITION = new Point(120, 180);&#10;  private static final Point USER_STATS_POSITION = new Point(210, 120);&#10;&#10;&#10;  @FXML&#10;  void buttonAction(ActionEvent event) {&#10;&#10;    if (isButtonCloseClicked(event)) {&#10;&#10;      hide();&#10;      return;&#10;    }&#10;&#10;    if (isButtonSettingsClicked(event)) {&#10;&#10;      manageSettingsMenuVisibility();&#10;      return;&#10;    }&#10;&#10;    if (event.getSource() == btLeft || event.getSource() == btRight) {&#10;&#10;      showInfoPanel(pnlMessage);&#10;&#10;    }&#10;  }&#10;&#10;  @FXML&#10;  public void handleButtonClick(MouseEvent event) {&#10;&#10;    if (isContextMenuClicked(event)) {&#10;&#10;      manageContextMenuVisibility();&#10;      return;&#10;    }&#10;  }&#10;&#10;  /** This method is called when the user clicks on the logger user icon. */&#10;  private void manageContextMenuVisibility() {&#10;&#10;    ScreenController contextMenuController = getScreen(Screens.MENU);&#10;&#10;    if (contextMenuController.isVisible() &amp;&amp; !contextMenuController.isInitialized()) {&#10;      contextMenuController.hide();&#10;      return;&#10;    }&#10;&#10;    contextMenuController.show(InputScreenData.fromPosition(MENU_POSITION));&#10;  }&#10;&#10;  private void manageSettingsMenuVisibility() {&#10;&#10;    ScreenController settingMenuController = getScreen(Screens.SETTINGS);&#10;    if (settingMenuController.isVisible() &amp;&amp; !settingMenuController.isInitialized()) {&#10;&#10;      settingMenuController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), SETTINGS_POSITION);&#10;&#10;    settingMenuController.show(inputData);&#10;  }&#10;&#10;  protected boolean isContextMenuClicked(MouseEvent event) {&#10;&#10;    return event.getSource() == lbUserInitials || event.getSource() == pnlMenu;&#10;  }&#10;&#10;  private boolean isButtonCloseClicked(ActionEvent event) {&#10;&#10;    return event.getSource() == btClose || event.getSource() == imgClose;&#10;  }&#10;&#10;  private boolean isButtonSettingsClicked(ActionEvent event) {&#10;&#10;    return event.getSource() == btSettings || event.getSource() == imgSettings;&#10;  }&#10;&#10;  private void showInfoPanel(Pane panel) {&#10;&#10;    panel.setVisible(!panel.isVisible());&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserSaved(UserSavedAppEvent event) {&#10;&#10;    Platform.runLater(&#10;        () -&gt; {&#10;          System.out.println(&quot;Se guardÃ³ el usuario: &quot; + event.getUserId());&#10;          reloadUserInitials(event.getUserId());&#10;        });&#10;  }&#10;&#10;  @Subscribe&#10;  public void onMenuSettingsClicked(OpenSettingsFromMenuEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageSettingsMenuVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onAnalysisBoardClicked(OpenAnalysisBoardEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageAnalysisBoardVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserChanged(ChangeUserEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageChangeUserVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onMemoryGameClicked(OpenMemoryGameEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageMemoryGameVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onDefendGameClicked(OpenDefendGameEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageDefendGameVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserStatsClicked(OpenUserStatsEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageUserStatsVisibility();&#10;  }&#10;  private void manageDefendGameVisibility() {&#10;&#10;    ScreenController defendGameController = getScreen(Screens.DEFEND_GAME);&#10;    if (defendGameController.isVisible() &amp;&amp; !defendGameController.isInitialized()) {&#10;&#10;      defendGameController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;            new SettingsViewInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), DEFEND_GAME_POSITION);&#10;    defendGameController.show(inputData);&#10;  }&#10;&#10;&#10;  private void manageMemoryGameVisibility() {&#10;&#10;    ScreenController memoryGameController = getScreen(Screens.MEMORY_GAME);&#10;    if (memoryGameController.isVisible() &amp;&amp; !memoryGameController.isInitialized()) {&#10;&#10;      memoryGameController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), MEMORY_GAME_POSITION);&#10;    memoryGameController.show(inputData);&#10;  }&#10;&#10;  private void manageAnalysisBoardVisibility() {&#10;&#10;    ScreenController boardController = getScreen(Screens.BOARD);&#10;    if (boardController.isVisible() &amp;&amp; !boardController.isInitialized()) {&#10;&#10;      boardController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), BOARD_POSITION);&#10;    boardController.show(inputData);&#10;  }&#10;&#10;  private void manageChangeUserVisibility() {&#10;&#10;    ScreenController changeUserController = getScreen(Screens.CHANGE_USER);&#10;    if (changeUserController.isVisible() &amp;&amp; !changeUserController.isInitialized()) {&#10;&#10;      changeUserController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;            new SettingsViewInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), CHANGE_USER_POSITION);&#10;    changeUserController.show(inputData);&#10;  }&#10;&#10;  private void manageUserStatsVisibility() {&#10;&#10;    ScreenController userStatsController = getScreen(Screens.USER_STATS);&#10;    if (userStatsController.isVisible() &amp;&amp; !userStatsController.isInitialized()) {&#10;&#10;      userStatsController.hide();&#10;      return;&#10;    }&#10;&#10;    UserStatsInputScreenData inputData =&#10;            new UserStatsInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), USER_STATS_POSITION);&#10;    userStatsController.show(inputData);&#10;  }&#10;&#10;  public MainSceneController() {&#10;&#10;    GlobalEventBus.get().register(this);&#10;  }&#10;&#10;  /** All the logic starts here! */&#10;  @FXML&#10;  public void initialize() {&#10;&#10;    initializeTaskBarBehaviour();&#10;    moveMainWindowsSetUp();&#10;    reloadUserInitials(AppProperties.getInstance().getActiveUserId());&#10;    showTextAnimation();&#10;  }&#10;&#10;  private void initializeTaskBarBehaviour(){&#10;&#10;    List&lt;StackPane&gt; items = Arrays.asList(taskOption_analysis, taskOption_games, taskOption_stats,taskOption_settings);&#10;&#10;    for (StackPane item : items) {&#10;      item.setOnMouseClicked(e -&gt; {&#10;        items.forEach(i -&gt; i.getStyleClass().remove(&quot;selected&quot;));&#10;        if (!item.getStyleClass().contains(&quot;selected&quot;)) {&#10;          item.getStyleClass().add(&quot;selected&quot;);&#10;        }&#10;      });&#10;    }&#10;&#10;  }&#10;  private void showTextAnimation() {&#10;&#10;    playTypeWriterEffect(lblChessboard.getText(), lblChessboard,0.04);&#10;    playTypeWriterEffect(lblPractice.getText(), lblPractice,0.1);&#10;&#10;  }&#10;&#10;  private void moveMainWindowsSetUp() {&#10;    imgLogo.setOnMousePressed(&#10;        event -&gt; {&#10;          xOffset = event.getSceneX();&#10;          yOffset = event.getSceneY();&#10;        });&#10;&#10;    imgLogo.setOnMouseDragged(&#10;        event -&gt; {&#10;          Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;&#10;          stage.setX(event.getScreenX() - xOffset);&#10;          stage.setY(event.getScreenY() - yOffset);&#10;        });&#10;  }&#10;&#10;  /**&#10;   * Get or initialize the screen controller for the given screen&#10;   *&#10;   * @param screen Screen to get&#10;   * @return ScreenController for the given screen&#10;   */&#10;  protected ScreenController getScreen(Screens screen) {&#10;&#10;    return screenManager.computeIfAbsent(&#10;        screen,&#10;        s -&gt; {&#10;          try {&#10;&#10;            var cachedScreen = ScreenFactory.getInstance().createScreen(s);&#10;            mainPane.getChildren().add(cachedScreen.getRootPane());&#10;            return cachedScreen;&#10;          } catch (IOException e) {&#10;&#10;            throw new RuntimeException(e);&#10;          }&#10;        });&#10;  }&#10;&#10;  private void reloadUserInitials(long userId) {&#10;&#10;    // TODO move createGetUserByUseCase to the constructor... to minimize dependencies&#10;    GetUserByIdUseCase getUserByIdUseCase = UseCaseFactory.createGetUserByIdUseCase();&#10;    User loggedUser = getUserByIdUseCase.execute(userId);&#10;    lbUserInitials.setText(loggedUser.getInitials());&#10;&#10;    FXAnimationUtil.fadeOut(lbUserInitials, 0.5)&#10;            .repeat(2)&#10;            .autoReverse(true)&#10;            .buildAndPlay();&#10;  }&#10;&#10;  private Stage stage;&#10;&#10;  public void setStage(final Stage fxStage) {&#10;&#10;    this.stage = fxStage;&#10;  }&#10;&#10;  public Stage getStage() {&#10;&#10;    return this.stage;&#10;  }&#10;&#10;  @Override&#10;  public void setData(InputScreenData inputData) {}&#10;&#10;  @Override&#10;  public void setLayout(double layoutX, double layoutY) {}&#10;&#10;  @Override&#10;  public void show() {}&#10;&#10;  @Override&#10;  public void show(InputScreenData inputData) {}&#10;&#10;  public void hide() {&#10;&#10;    stage.hide();&#10;  }&#10;&#10;  @Override&#10;  public Pane getRootPane() {&#10;    return mainPane;&#10;  }&#10;&#10;  @Override&#10;  public ScreenStatus getStatus() {&#10;    return null;&#10;  }&#10;&#10;  @Override&#10;  public boolean isInitialized() {&#10;    return false;&#10;  }&#10;&#10;  @Override&#10;  public boolean isVisible() {&#10;    return false;&#10;  }&#10;&#10;  @Override&#10;  public boolean isHidden() {&#10;    return false;&#10;  }&#10;&#10;  public void maximize() {&#10;&#10;    if (stage.isMaximized()) {&#10;&#10;      stage.setMaximized(false);&#10;&#10;    } else {&#10;&#10;      stage.setMaximized(true);&#10;    }&#10;  }&#10;&#10;  public void minimize() {&#10;&#10;    stage.setIconified(true);&#10;  }&#10;&#10;&#10;  private void playTypeWriterEffect(String text, Text textNode, double charInterval) {&#10;&#10;      textNode.setText(&quot;&quot;);&#10;      StringBuilder currentText = new StringBuilder();&#10;&#10;      javafx.animation.Timeline timeline = new javafx.animation.Timeline();&#10;      for (int i = 0; i &lt; text.length(); i++) {&#10;          final int index = i;&#10;          javafx.animation.KeyFrame keyFrame = new javafx.animation.KeyFrame(&#10;              javafx.util.Duration.seconds(index * charInterval),&#10;              e -&gt; {&#10;                  currentText.append(text.charAt(index));&#10;                  textNode.setText(currentText.toString());&#10;              }&#10;          );&#10;          timeline.getKeyFrames().add(keyFrame);&#10;      }&#10;      timeline.play();&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.ui.main;&#10;&#10;import com.davidp.chessjourney.application.config.AppProperties;&#10;import com.davidp.chessjourney.application.config.GlobalEventBus;&#10;import com.davidp.chessjourney.application.domain.*;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory;&#10;import com.davidp.chessjourney.application.factories.ScreenFactory.Screens;&#10;import com.davidp.chessjourney.application.factories.UseCaseFactory;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import com.davidp.chessjourney.application.ui.settings.SettingsViewInputScreenData;&#10;import com.davidp.chessjourney.application.ui.user.UserStatsInputScreenData;&#10;import com.davidp.chessjourney.application.ui.util.FXAnimationUtil;&#10;import com.davidp.chessjourney.application.usecases.GetUserByIdUseCase;&#10;import com.davidp.chessjourney.domain.User;&#10;import com.google.common.eventbus.Subscribe;&#10;import java.awt.*;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.io.IOException;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import javafx.application.Platform;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.Node;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.Pane;&#10;import javafx.scene.layout.StackPane;&#10;import javafx.scene.text.Text;&#10;import javafx.stage.Stage;&#10;&#10;/**&#10; * This class is responsible for managing the main scene of the application, the main scene controls&#10; * all the features and windows dynamics of the application It is responsible for managing the main&#10; * menu, the settings menu, the board, and the game.&#10; */&#10;public class MainSceneController implements ScreenController {&#10;&#10;  @FXML private Button btClose;&#10;&#10;  @FXML private Button btLeft;&#10;&#10;  @FXML private Button btRight;&#10;&#10;  @FXML private Button btSettings;&#10;&#10;  @FXML private Label lbUserInitials;&#10;&#10;  @FXML private Pane mainPane;&#10;&#10;  @FXML private Pane pnlMessage;&#10;&#10;  @FXML private StackPane pnlMenu;&#10;&#10;  @FXML private ImageView imgClose;&#10;&#10;  @FXML private ImageView imgSettings;&#10;&#10;  @FXML private ImageView imgLogo;&#10;&#10;&#10;  @FXML&#10;  private Text lblPractice;&#10;&#10;  @FXML&#10;  private Text lblChessboard;&#10;&#10;  @FXML&#10;  private HBox taskBar;&#10;&#10;  @FXML&#10;  private StackPane taskOption_analysis;&#10;&#10;  @FXML&#10;  private StackPane taskOption_games;&#10;&#10;  @FXML&#10;  private StackPane taskOption_stats;&#10;&#10;  @FXML&#10;  private StackPane taskOption_settings;&#10;&#10;  // Variables para guardar la posiciÃ³n (offset) dentro de la ventana al pulsar el ratÃ³n&#10;  private double xOffset = 0;&#10;  private double yOffset = 0;&#10;&#10;  // This map is used to cache the screens that are created.&#10;  private final Map&lt;Screens, ScreenController&gt; screenManager = new HashMap&lt;&gt;();&#10;  private static final Point MENU_POSITION = new Point(20, 460);&#10;  private static final Point SETTINGS_POSITION = new Point(320, 180);&#10;  private static final Point BOARD_POSITION = new Point(10, 10);&#10;  private static final Point MEMORY_GAME_POSITION = new Point(10, 10);&#10;  private static final Point DEFEND_GAME_POSITION = new Point(10, 10);&#10;  private static final Point CHANGE_USER_POSITION = new Point(120, 180);&#10;  private static final Point USER_STATS_POSITION = new Point(210, 120);&#10;&#10;&#10;  @FXML&#10;  void buttonAction(ActionEvent event) {&#10;&#10;    if (isButtonCloseClicked(event)) {&#10;&#10;      hide();&#10;      return;&#10;    }&#10;&#10;    if (isButtonSettingsClicked(event)) {&#10;&#10;      manageSettingsMenuVisibility();&#10;      return;&#10;    }&#10;&#10;    if (event.getSource() == btLeft || event.getSource() == btRight) {&#10;&#10;      showInfoPanel(pnlMessage);&#10;&#10;    }&#10;  }&#10;&#10;  @FXML&#10;  public void handleButtonClick(MouseEvent event) {&#10;&#10;    if (isContextMenuClicked(event)) {&#10;&#10;      manageContextMenuVisibility();&#10;      return;&#10;    }&#10;  }&#10;&#10;  /** This method is called when the user clicks on the logger user icon. */&#10;  private void manageContextMenuVisibility() {&#10;&#10;    ScreenController contextMenuController = getScreen(Screens.MENU);&#10;&#10;    if (contextMenuController.isVisible() &amp;&amp; !contextMenuController.isInitialized()) {&#10;      contextMenuController.hide();&#10;      return;&#10;    }&#10;&#10;    contextMenuController.show(InputScreenData.fromPosition(MENU_POSITION));&#10;  }&#10;&#10;  private void manageSettingsMenuVisibility() {&#10;&#10;    ScreenController settingMenuController = getScreen(Screens.SETTINGS);&#10;    if (settingMenuController.isVisible() &amp;&amp; !settingMenuController.isInitialized()) {&#10;&#10;      settingMenuController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), SETTINGS_POSITION);&#10;&#10;    settingMenuController.show(inputData);&#10;  }&#10;&#10;  protected boolean isContextMenuClicked(MouseEvent event) {&#10;&#10;    return event.getSource() == lbUserInitials || event.getSource() == pnlMenu;&#10;  }&#10;&#10;  private boolean isButtonCloseClicked(ActionEvent event) {&#10;&#10;    return event.getSource() == btClose || event.getSource() == imgClose;&#10;  }&#10;&#10;  private boolean isButtonSettingsClicked(ActionEvent event) {&#10;&#10;    return event.getSource() == btSettings || event.getSource() == imgSettings;&#10;  }&#10;&#10;  private void showInfoPanel(Pane panel) {&#10;&#10;    panel.setVisible(!panel.isVisible());&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserSaved(UserSavedAppEvent event) {&#10;&#10;    Platform.runLater(&#10;        () -&gt; {&#10;          System.out.println(&quot;Se guardÃ³ el usuario: &quot; + event.getUserId());&#10;          reloadUserInitials(event.getUserId());&#10;        });&#10;  }&#10;&#10;  @Subscribe&#10;  public void onMenuSettingsClicked(OpenSettingsFromMenuEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageSettingsMenuVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onAnalysisBoardClicked(OpenAnalysisBoardEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageAnalysisBoardVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserChanged(ChangeUserEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageChangeUserVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onMemoryGameClicked(OpenMemoryGameEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageMemoryGameVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onDefendGameClicked(OpenDefendGameEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageDefendGameVisibility();&#10;  }&#10;&#10;  @Subscribe&#10;  public void onUserStatsClicked(OpenUserStatsEvent event) {&#10;&#10;    manageContextMenuVisibility();&#10;    manageUserStatsVisibility();&#10;  }&#10;  private void manageDefendGameVisibility() {&#10;&#10;    ScreenController defendGameController = getScreen(Screens.DEFEND_GAME);&#10;    if (defendGameController.isVisible() &amp;&amp; !defendGameController.isInitialized()) {&#10;&#10;      defendGameController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;            new SettingsViewInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), DEFEND_GAME_POSITION);&#10;    defendGameController.show(inputData);&#10;  }&#10;&#10;&#10;  private void manageMemoryGameVisibility() {&#10;&#10;    ScreenController memoryGameController = getScreen(Screens.MEMORY_GAME);&#10;    if (memoryGameController.isVisible() &amp;&amp; !memoryGameController.isInitialized()) {&#10;&#10;      memoryGameController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), MEMORY_GAME_POSITION);&#10;    memoryGameController.show(inputData);&#10;  }&#10;&#10;  private void manageAnalysisBoardVisibility() {&#10;&#10;    ScreenController boardController = getScreen(Screens.BOARD);&#10;    if (boardController.isVisible() &amp;&amp; !boardController.isInitialized()) {&#10;&#10;      boardController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;        new SettingsViewInputScreenData(&#10;            AppProperties.getInstance().getActiveUserId(), BOARD_POSITION);&#10;    boardController.show(inputData);&#10;  }&#10;&#10;  private void manageChangeUserVisibility() {&#10;&#10;    ScreenController changeUserController = getScreen(Screens.CHANGE_USER);&#10;    if (changeUserController.isVisible() &amp;&amp; !changeUserController.isInitialized()) {&#10;&#10;      changeUserController.hide();&#10;      return;&#10;    }&#10;&#10;    SettingsViewInputScreenData inputData =&#10;            new SettingsViewInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), CHANGE_USER_POSITION);&#10;    changeUserController.show(inputData);&#10;  }&#10;&#10;  private void manageUserStatsVisibility() {&#10;&#10;    ScreenController userStatsController = getScreen(Screens.USER_STATS);&#10;    if (userStatsController.isVisible() &amp;&amp; !userStatsController.isInitialized()) {&#10;&#10;      userStatsController.hide();&#10;      return;&#10;    }&#10;&#10;    UserStatsInputScreenData inputData =&#10;            new UserStatsInputScreenData(&#10;                    AppProperties.getInstance().getActiveUserId(), USER_STATS_POSITION);&#10;    userStatsController.show(inputData);&#10;  }&#10;&#10;  public MainSceneController() {&#10;&#10;    GlobalEventBus.get().register(this);&#10;  }&#10;&#10;  /** All the logic starts here! */&#10;  @FXML&#10;  public void initialize() {&#10;&#10;    initializeTaskBarBehaviour();&#10;    moveMainWindowsSetUp();&#10;    reloadUserInitials(AppProperties.getInstance().getActiveUserId());&#10;    showTextAnimation();&#10;  }&#10;&#10;  private void initializeTaskBarBehaviour(){&#10;&#10;    List&lt;StackPane&gt; items = Arrays.asList(taskOption_analysis, taskOption_games, taskOption_stats,taskOption_settings);&#10;&#10;    for (StackPane item : items) {&#10;      item.setOnMouseClicked(e -&gt; {&#10;        items.forEach(i -&gt; i.getStyleClass().remove(&quot;selected&quot;));&#10;        if (!item.getStyleClass().contains(&quot;selected&quot;)) {&#10;          item.getStyleClass().add(&quot;selected&quot;);&#10;        }&#10;      });&#10;    }&#10;&#10;  }&#10;  private void showTextAnimation() {&#10;      GetRandomQuoteUseCase getRandomQuoteUseCase = UseCaseFactory.createGetRandomQuoteUseCase();&#10;      Quote randomQuote = getRandomQuoteUseCase.execute();&#10;      &#10;      playTypeWriterEffect(randomQuote.getText(), lblChessboard, 0.04);&#10;      playTypeWriterEffect(&quot;â &quot; + randomQuote.getAuthor(), lblPractice, 0.1);&#10;  }&#10;&#10;  private void moveMainWindowsSetUp() {&#10;    imgLogo.setOnMousePressed(&#10;        event -&gt; {&#10;          xOffset = event.getSceneX();&#10;          yOffset = event.getSceneY();&#10;        });&#10;&#10;    imgLogo.setOnMouseDragged(&#10;        event -&gt; {&#10;          Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;&#10;          stage.setX(event.getScreenX() - xOffset);&#10;          stage.setY(event.getScreenY() - yOffset);&#10;        });&#10;  }&#10;&#10;  /**&#10;   * Get or initialize the screen controller for the given screen&#10;   *&#10;   * @param screen Screen to get&#10;   * @return ScreenController for the given screen&#10;   */&#10;  protected ScreenController getScreen(Screens screen) {&#10;&#10;    return screenManager.computeIfAbsent(&#10;        screen,&#10;        s -&gt; {&#10;          try {&#10;&#10;            var cachedScreen = ScreenFactory.getInstance().createScreen(s);&#10;            mainPane.getChildren().add(cachedScreen.getRootPane());&#10;            return cachedScreen;&#10;          } catch (IOException e) {&#10;&#10;            throw new RuntimeException(e);&#10;          }&#10;        });&#10;  }&#10;&#10;  private void reloadUserInitials(long userId) {&#10;&#10;    // TODO move createGetUserByUseCase to the constructor... to minimize dependencies&#10;    GetUserByIdUseCase getUserByIdUseCase = UseCaseFactory.createGetUserByIdUseCase();&#10;    User loggedUser = getUserByIdUseCase.execute(userId);&#10;    lbUserInitials.setText(loggedUser.getInitials());&#10;&#10;    FXAnimationUtil.fadeOut(lbUserInitials, 0.5)&#10;            .repeat(2)&#10;            .autoReverse(true)&#10;            .buildAndPlay();&#10;  }&#10;&#10;  private Stage stage;&#10;&#10;  public void setStage(final Stage fxStage) {&#10;&#10;    this.stage = fxStage;&#10;  }&#10;&#10;  public Stage getStage() {&#10;&#10;    return this.stage;&#10;  }&#10;&#10;  @Override&#10;  public void setData(InputScreenData inputData) {}&#10;&#10;  @Override&#10;  public void setLayout(double layoutX, double layoutY) {}&#10;&#10;  @Override&#10;  public void show() {}&#10;&#10;  @Override&#10;  public void show(InputScreenData inputData) {}&#10;&#10;  public void hide() {&#10;&#10;    stage.hide();&#10;  }&#10;&#10;  @Override&#10;  public Pane getRootPane() {&#10;    return mainPane;&#10;  }&#10;&#10;  @Override&#10;  public ScreenStatus getStatus() {&#10;    return null;&#10;  }&#10;&#10;  @Override&#10;  public boolean isInitialized() {&#10;    return false;&#10;  }&#10;&#10;  @Override&#10;  public boolean isVisible() {&#10;    return false;&#10;  }&#10;&#10;  @Override&#10;  public boolean isHidden() {&#10;    return false;&#10;  }&#10;&#10;  public void maximize() {&#10;&#10;    if (stage.isMaximized()) {&#10;&#10;      stage.setMaximized(false);&#10;&#10;    } else {&#10;&#10;      stage.setMaximized(true);&#10;    }&#10;  }&#10;&#10;  public void minimize() {&#10;&#10;    stage.setIconified(true);&#10;  }&#10;&#10;&#10;  private void playTypeWriterEffect(String text, Text textNode, double charInterval) {&#10;&#10;      textNode.setText(&quot;&quot;);&#10;      StringBuilder currentText = new StringBuilder();&#10;&#10;      javafx.animation.Timeline timeline = new javafx.animation.Timeline();&#10;      for (int i = 0; i &lt; text.length(); i++) {&#10;          final int index = i;&#10;          javafx.animation.KeyFrame keyFrame = new javafx.animation.KeyFrame(&#10;              javafx.util.Duration.seconds(index * charInterval),&#10;              e -&gt; {&#10;                  currentText.append(text.charAt(index));&#10;                  textNode.setText(currentText.toString());&#10;              }&#10;          );&#10;          timeline.getKeyFrames().add(keyFrame);&#10;      }&#10;      timeline.play();&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/usecases/GetRandomQuoteUseCase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/usecases/GetRandomQuoteUseCase.java" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.usecases;&#10;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import com.davidp.chessjourney.domain.QuoteRepository;&#10;&#10;public class GetRandomQuoteUseCase {&#10;    private final QuoteRepository quoteRepository;&#10;&#10;    public GetRandomQuoteUseCase(QuoteRepository quoteRepository) {&#10;        this.quoteRepository = quoteRepository;&#10;    }&#10;&#10;    public Quote execute() {&#10;        return quoteRepository.getRandomQuote()&#10;                .orElse(new Quote(&quot;Chess is imagination&quot;, &quot;Anonymous&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/usecases/SaveQuoteUseCase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/usecases/SaveQuoteUseCase.java" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.usecases;&#10;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import com.davidp.chessjourney.domain.QuoteRepository;&#10;&#10;public class SaveQuoteUseCase {&#10;    private final QuoteRepository quoteRepository;&#10;&#10;    public SaveQuoteUseCase(QuoteRepository quoteRepository) {&#10;        this.quoteRepository = quoteRepository;&#10;    }&#10;&#10;    public Quote execute(String text, String author) {&#10;        Quote quote = new Quote(text, author);&#10;        return quoteRepository.save(quote);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/domain/Quote.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/domain/Quote.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.domain;&#10;&#10;&#10;public class Quote {&#10;    private Long id;&#10;    private String text;&#10;    private String author;&#10;&#10;    public Quote(Long id, String text, String author) {&#10;        this.id = id;&#10;        this.text = text;&#10;        this.author = author;&#10;    }&#10;&#10;    public Quote(String text, String author) {&#10;        this.text = text;&#10;        this.author = author;&#10;    }&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    public String getAuthor() {&#10;        return author;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.domain;&#10;&#10;/**&#10; * Represents a quote entity with an id, text, and author.&#10; * Used to encapsulate quote data within the application.&#10; */&#10;public class Quote {&#10;    private Long id;&#10;    private String text;&#10;    private String author;&#10;&#10;    public Quote(Long id, String text, String author) {&#10;        this.id = id;&#10;        this.text = text;&#10;        this.author = author;&#10;    }&#10;&#10;    public Quote(String text, String author) {&#10;        this.text = text;&#10;        this.author = author;&#10;    }&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    public String getAuthor() {&#10;        return author;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/domain/QuoteRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/domain/QuoteRepository.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.domain;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repository interface for managing Quote entities.&#10; * Provides methods to save a quote, retrieve a random quote, and get all quotes.&#10; */&#10;public interface QuoteRepository {&#10;&#10;  Quote save(Quote quote);&#10;&#10;  Optional&lt;Quote&gt; getRandomQuote();&#10;&#10;  List&lt;Quote&gt; getAllQuotes();&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.domain;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repository interface for managing Quote entities.&#10; * Provides methods to save a quote, retrieve a random quote, and get all quotes.&#10; */&#10;public interface QuoteRepository {&#10;&#10;  /**&#10;   * Saves a quote entity to the repository.&#10;   *&#10;   * @param quote the Quote to be saved&#10;   * @return the saved Quote entity&#10;   */&#10;  Quote save(Quote quote);&#10;&#10;  /**&#10;   * Retrieves a random quote from the repository.&#10;   *&#10;   * @return an Optional containing a random Quote, or empty if none exist&#10;   */&#10;  Optional&lt;Quote&gt; getRandomQuote();&#10;&#10;  /**&#10;   * Retrieves all quotes from the repository.&#10;   *&#10;   * @return a list of all Quote entities&#10;   */&#10;  List&lt;Quote&gt; getAllQuotes();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/infrastructure/database/QuoteRepositoryImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/infrastructure/database/QuoteRepositoryImpl.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.infrastructure.database;&#10;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import com.davidp.chessjourney.domain.QuoteRepository;&#10;&#10;import javax.sql.DataSource;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class QuoteRepositoryImpl implements QuoteRepository {&#10;&#10;    private final DataSource dataSource;&#10;&#10;    public QuoteRepositoryImpl(DataSource dataSource) {&#10;        this.dataSource = dataSource;&#10;    }&#10;&#10;    @Override&#10;    public Quote save(Quote quote) {&#10;        String sql = &quot;INSERT INTO quotes (text, author) VALUES (?, ?) RETURNING id&quot;;&#10;        try (PreparedStatement stmt = dataSource.getConnection().prepareStatement(sql)) {&#10;            stmt.setString(1, quote.getText());&#10;            stmt.setString(2, quote.getAuthor());&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                quote.setId(rs.getLong(&quot;id&quot;));&#10;                return quote;&#10;            }&#10;            throw new RuntimeException(&quot;Failed to save quote&quot;);&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(&quot;Error saving quote&quot;, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Optional&lt;Quote&gt; getRandomQuote() {&#10;        String sql = &quot;SELECT * FROM quotes ORDER BY RANDOM() LIMIT 1&quot;;&#10;        try (PreparedStatement stmt = dataSource.getConnection().prepareStatement(sql)) {&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                return Optional.of(new Quote(&#10;                    rs.getLong(&quot;id&quot;),&#10;                    rs.getString(&quot;text&quot;),&#10;                    rs.getString(&quot;author&quot;)&#10;                ));&#10;            }&#10;            return Optional.empty();&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(&quot;Error getting random quote&quot;, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Quote&gt; getAllQuotes() {&#10;        String sql = &quot;SELECT * FROM quotes&quot;;&#10;        List&lt;Quote&gt; quotes = new ArrayList&lt;&gt;();&#10;        try (PreparedStatement stmt = dataSource.getConnection().prepareStatement(sql)) {&#10;            ResultSet rs = stmt.executeQuery();&#10;            while (rs.next()) {&#10;                quotes.add(new Quote(&#10;                    rs.getLong(&quot;id&quot;),&#10;                    rs.getString(&quot;text&quot;),&#10;                    rs.getString(&quot;author&quot;)&#10;                ));&#10;            }&#10;            return quotes;&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(&quot;Error getting all quotes&quot;, e);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.davidp.chessjourney.infrastructure.database;&#10;&#10;import com.davidp.chessjourney.domain.Quote;&#10;import com.davidp.chessjourney.domain.QuoteRepository;&#10;&#10;import javax.sql.DataSource;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Implementation of the QuoteRepository interface using a relational database.&#10; * Provides methods to save quotes, retrieve a random quote, and fetch all quotes from the database.&#10; */&#10;public class QuoteRepositoryImpl implements QuoteRepository {&#10;&#10;    private final DataSource dataSource;&#10;&#10;    public QuoteRepositoryImpl(DataSource dataSource) {&#10;        this.dataSource = dataSource;&#10;    }&#10;&#10;    @Override&#10;    public Quote save(Quote quote) {&#10;        String sql = &quot;INSERT INTO quotes (text, author) VALUES (?, ?) RETURNING id&quot;;&#10;        try (PreparedStatement stmt = dataSource.getConnection().prepareStatement(sql)) {&#10;            stmt.setString(1, quote.getText());&#10;            stmt.setString(2, quote.getAuthor());&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                quote.setId(rs.getLong(&quot;id&quot;));&#10;                return quote;&#10;            }&#10;            throw new RuntimeException(&quot;Failed to save quote&quot;);&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(&quot;Error saving quote&quot;, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Optional&lt;Quote&gt; getRandomQuote() {&#10;        String sql = &quot;SELECT * FROM quotes ORDER BY RANDOM() LIMIT 1&quot;;&#10;        try (PreparedStatement stmt = dataSource.getConnection().prepareStatement(sql)) {&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                return Optional.of(new Quote(&#10;                    rs.getLong(&quot;id&quot;),&#10;                    rs.getString(&quot;text&quot;),&#10;                    rs.getString(&quot;author&quot;)&#10;                ));&#10;            }&#10;            return Optional.empty();&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(&quot;Error getting random quote&quot;, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Quote&gt; getAllQuotes() {&#10;        String sql = &quot;SELECT * FROM quotes&quot;;&#10;        List&lt;Quote&gt; quotes = new ArrayList&lt;&gt;();&#10;        try (PreparedStatement stmt = dataSource.getConnection().prepareStatement(sql)) {&#10;            ResultSet rs = stmt.executeQuery();&#10;            while (rs.next()) {&#10;                quotes.add(new Quote(&#10;                    rs.getLong(&quot;id&quot;),&#10;                    rs.getString(&quot;text&quot;),&#10;                    rs.getString(&quot;author&quot;)&#10;                ));&#10;            }&#10;            return quotes;&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(&quot;Error getting all quotes&quot;, e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/JavaFXSoundUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil {&#10;    private final EnumMap&lt;Enum&lt;?&gt;, AudioClip&gt; soundCache = new EnumMap&lt;&gt;(Enum.class);&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public &lt;E extends Enum&lt;E&gt;&gt; void preloadSounds(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(Enum&lt;?&gt; type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;E&gt; {&#10;        String getResourceName(E type);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import javafx.scene.media.AudioClip;&#10;import java.net.URL;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;public class JavaFXSoundUtil&lt;E extends Enum&lt;E&gt;&gt; {&#10;    private final EnumMap&lt;E, AudioClip&gt; soundCache;&#10;    private final ClassLoader classLoader = getClass().getClassLoader();&#10;&#10;    public JavaFXSoundUtil(Class&lt;E&gt; enumClass, SoundResourceProvider&lt;E&gt; provider) {&#10;        soundCache = new EnumMap&lt;&gt;(enumClass);&#10;        for (E type : enumClass.getEnumConstants()) {&#10;            String resource = provider.getResourceName(type);&#10;            URL url = classLoader.getResource(&quot;assets/sounds/&quot; + resource);&#10;            if (url != null) {&#10;                soundCache.put(type, new AudioClip(url.toExternalForm()));&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playSound(E type) {&#10;        Optional.ofNullable(soundCache.get(type)).ifPresent(AudioClip::play);&#10;    }&#10;&#10;    public interface SoundResourceProvider&lt;T&gt; {&#10;        String getResourceName(T type);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/factories/SoundServiceFactory.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil();&#10;    soundUtil.preloadSounds(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.factories;&#10;&#10;import java.util.EnumMap;&#10;import java.util.Optional;&#10;&#10;/** This class is responsible for managing and playing game sounds. */&#10;public class SoundServiceFactory {&#10;&#10;  /** Enum for managing the sounds of the game. */&#10;  public enum SoundType {&#10;    PIECE_PLACEMENT(&quot;piece-placement.wav&quot;),&#10;    PIECE_PLACEMENT_ERROR(&quot;piece-placement-error.wav&quot;),&#10;    FAIL_EXERCISE(&quot;move-fail.wav&quot;),&#10;    SUCCEED_EXERCISE(&quot;move-success.wav&quot;),&#10;    NEW_GAME(&quot;new-game.wav&quot;);&#10;&#10;    private final String resourcePath;&#10;&#10;    SoundType(final String resourcePath) {&#10;      this.resourcePath = resourcePath;&#10;    }&#10;&#10;    public String resourceName() {&#10;      return this.resourcePath;&#10;    }&#10;  }&#10;&#10;  private static volatile SoundServiceFactory instance;&#10;  private final JavaFXSoundUtil&lt;SoundType&gt; soundUtil;&#10;&#10;  private SoundServiceFactory() {&#10;    soundUtil = new JavaFXSoundUtil&lt;&gt;(SoundType.class, SoundType::resourceName);&#10;  }&#10;&#10;  public static SoundServiceFactory getInstance() {&#10;    if (instance == null) {&#10;      synchronized (SoundServiceFactory.class) {&#10;        if (instance == null) {&#10;          instance = new SoundServiceFactory();&#10;        }&#10;      }&#10;    }&#10;    return instance;&#10;  }&#10;&#10;  /**&#10;   * Plays the specified sound type.&#10;   *&#10;   * @param soundType the type of sound to play&#10;   */&#10;  public void playSound(SoundType soundType) {&#10;    soundUtil.playSound(soundType);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/board/ExerciseResultViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/ui/board/ExerciseResultViewController.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.ui.board;&#10;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import com.davidp.chessjourney.application.factories.SoundServiceFactory;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.input.KeyEvent;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.Pane;&#10;import javafx.util.Duration;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.ImageView;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static javafx.application.Platform.runLater;&#10;&#10;public class ExerciseResultViewController implements ScreenController {&#10;&#10;    private ScreenController.ScreenStatus status;&#10;&#10;    private ExerciseResultViewInputScreenData exerciseResultViewInputScreenData;&#10;&#10;    private final SoundServiceFactory soundService = SoundServiceFactory.getInstance();&#10;&#10;    @FXML&#10;    private Button btOk;&#10;&#10;    @FXML&#10;    private ImageView imgNotice;&#10;&#10;    @FXML&#10;    private ImageView imgOk;&#10;&#10;    @FXML&#10;    private ImageView imgStar1;&#10;&#10;    @FXML&#10;    private ImageView imgStar2;&#10;&#10;    @FXML&#10;    private ImageView imgStar3;&#10;&#10;    @FXML&#10;    private ImageView imgStar4;&#10;&#10;    @FXML&#10;    private ImageView imgStar5;&#10;&#10;    @FXML&#10;    private ImageView imgStar6;&#10;&#10;    @FXML&#10;    private Label lblPercent;&#10;&#10;    @FXML&#10;    private Pane rootPane;&#10;&#10;    @FXML&#10;    void keyPressed(KeyEvent event) {&#10;&#10;    }&#10;&#10;    @FXML&#10;    void mouseClicked(MouseEvent event) {&#10;&#10;    }&#10;&#10;    public void initialize() {&#10;&#10;        status = ScreenController.ScreenStatus.INITIALIZED;&#10;&#10;    }&#10;&#10;    @Override&#10;    public void setData(InputScreenData inputData) {&#10;&#10;        if (inputData == null) {&#10;            return;&#10;        }&#10;&#10;&#10;        lblPercent.setText(&quot;...&quot;);&#10;&#10;        if (inputData.isLayoutInfoValid()) {&#10;&#10;                setLayout(inputData.getLayoutX(), inputData.getLayoutY());&#10;        }&#10;        this.exerciseResultViewInputScreenData = (ExerciseResultViewInputScreenData) inputData;&#10;        lblPercent.setText(this.exerciseResultViewInputScreenData.getPercentage() + &quot; %!&quot;);&#10;        showStarsProgressively(this.exerciseResultViewInputScreenData.getPercentage());&#10;    }&#10;&#10;    @Override&#10;    public void setLayout(double layoutX, double layoutY) {&#10;&#10;        rootPane.setLayoutX(layoutX);&#10;        rootPane.setLayoutY(layoutY);&#10;    }&#10;&#10;    @Override&#10;    public void show() {&#10;&#10;        rootPane.setVisible(false);&#10;&#10;        // Fade in animation when showing&#10;        FXGL.animationBuilder()&#10;                .duration(Duration.seconds(0.2))&#10;                .onFinished(&#10;                        () -&gt; {&#10;                            rootPane.setVisible(true);&#10;                            rootPane.toFront();&#10;                        })&#10;                .fadeIn(rootPane)&#10;                .buildAndPlay();&#10;    }&#10;&#10;    @Override&#10;    public void show(InputScreenData inputData) {&#10;&#10;        setData(inputData);&#10;        status = ScreenController.ScreenStatus.VISIBLE;&#10;        show();&#10;    }&#10;&#10;    @Override&#10;    public void hide() {&#10;&#10;        FXGL.animationBuilder()&#10;                .duration(Duration.seconds(0.2))&#10;                .onFinished(&#10;                        () -&gt; {&#10;                            rootPane.setVisible(false);&#10;                            status = ScreenStatus.HIDDEN;&#10;                        })&#10;                .fadeOut(rootPane)&#10;                .buildAndPlay();&#10;    }&#10;&#10;&#10;    @Override&#10;    public boolean isVisible() {&#10;        return rootPane.isVisible();&#10;    }&#10;&#10;    @Override&#10;    public boolean isHidden() {&#10;        return !rootPane.isVisible();&#10;    }&#10;&#10;    @Override&#10;    public Pane getRootPane() {&#10;        return rootPane;&#10;    }&#10;&#10;    @Override&#10;    public ScreenStatus getStatus() {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public boolean isInitialized() {&#10;&#10;        return status == ScreenController.ScreenStatus.INITIALIZED;&#10;    }&#10;&#10;    protected void setExerciseResultViewInputScreenData(ExerciseResultViewInputScreenData exerciseResultViewInputScreenData) {&#10;&#10;        this.exerciseResultViewInputScreenData = exerciseResultViewInputScreenData;&#10;    }&#10;&#10;    protected ExerciseResultViewInputScreenData getExerciseResultViewInputScreenData() {&#10;&#10;        return exerciseResultViewInputScreenData;&#10;    }&#10;&#10;    @FXML&#10;    void buttonAction(ActionEvent event) {&#10;&#10;        if (event.getSource() == btOk) {&#10;&#10;            hide();&#10;        }&#10;&#10;    }&#10;&#10;    /**&#10;     * Show stars progressively based on the percentage&#10;     * @param percent percentage of stars to show&#10;     */&#10;    private void showStarsProgressively(double percent) {&#10;&#10;        int starsToShow = (int) Math.round((percent / 100.0) * 6);&#10;        List&lt;ImageView&gt; stars = Arrays.asList(imgStar1, imgStar2, imgStar3, imgStar4, imgStar5, imgStar6);&#10;        stars.forEach(star -&gt; star.setImage(new Image(&quot;com/davidp/chessjourney/img-gray/stars_48dp_gray.png&quot;)));&#10;&#10;        // Show stars progressively&#10;        for (int i = 0; i &lt; starsToShow; i++) {&#10;&#10;            int starIndex = i;&#10;            FXGL.runOnce(&#10;                    () -&gt;{&#10;                        stars.get(starIndex).setImage(new Image(&quot;com/davidp/chessjourney/img-gray/stars_48dp_purple.png&quot;));&#10;                        runLater(&#10;                                () -&gt; soundService.playSound(SoundServiceFactory.SoundType.SUCCEED_EXERCISE));&#10;                    },&#10;                    Duration.millis(400 * (i + 1))&#10;&#10;            );&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.ui.board;&#10;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import com.davidp.chessjourney.application.factories.SoundServiceFactory;&#10;import com.davidp.chessjourney.application.ui.ScreenController;&#10;import com.davidp.chessjourney.application.ui.settings.InputScreenData;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.input.KeyEvent;&#10;import javafx.scene.input.MouseEvent;&#10;import javafx.scene.layout.Pane;&#10;import javafx.util.Duration;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.image.ImageView;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static javafx.application.Platform.runLater;&#10;&#10;public class ExerciseResultViewController implements ScreenController {&#10;&#10;    private ScreenController.ScreenStatus status;&#10;&#10;    private ExerciseResultViewInputScreenData exerciseResultViewInputScreenData;&#10;&#10;    private final SoundServiceFactory soundService = SoundServiceFactory.getInstance();&#10;&#10;    @FXML&#10;    private Button btOk;&#10;&#10;    @FXML&#10;    private ImageView imgNotice;&#10;&#10;    @FXML&#10;    private ImageView imgOk;&#10;&#10;    @FXML&#10;    private ImageView imgStar1;&#10;&#10;    @FXML&#10;    private ImageView imgStar2;&#10;&#10;    @FXML&#10;    private ImageView imgStar3;&#10;&#10;    @FXML&#10;    private ImageView imgStar4;&#10;&#10;    @FXML&#10;    private ImageView imgStar5;&#10;&#10;    @FXML&#10;    private ImageView imgStar6;&#10;&#10;    @FXML&#10;    private Label lblPercent;&#10;&#10;    @FXML&#10;    private Pane rootPane;&#10;&#10;    @FXML&#10;    void keyPressed(KeyEvent event) {&#10;&#10;    }&#10;&#10;    @FXML&#10;    void mouseClicked(MouseEvent event) {&#10;&#10;    }&#10;&#10;    public void initialize() {&#10;&#10;        status = ScreenController.ScreenStatus.INITIALIZED;&#10;&#10;    }&#10;&#10;    @Override&#10;    public void setData(InputScreenData inputData) {&#10;&#10;        if (inputData == null) {&#10;            return;&#10;        }&#10;&#10;&#10;        lblPercent.setText(&quot;...&quot;);&#10;&#10;        if (inputData.isLayoutInfoValid()) {&#10;&#10;                setLayout(inputData.getLayoutX(), inputData.getLayoutY());&#10;        }&#10;        this.exerciseResultViewInputScreenData = (ExerciseResultViewInputScreenData) inputData;&#10;        lblPercent.setText(this.exerciseResultViewInputScreenData.getPercentage() + &quot; %!&quot;);&#10;        showStarsProgressively(this.exerciseResultViewInputScreenData.getPercentage());&#10;    }&#10;&#10;    @Override&#10;    public void setLayout(double layoutX, double layoutY) {&#10;&#10;        rootPane.setLayoutX(layoutX);&#10;        rootPane.setLayoutY(layoutY);&#10;    }&#10;&#10;    @Override&#10;    public void show() {&#10;&#10;        rootPane.setVisible(false);&#10;&#10;        // Fade in animation when showing&#10;        FXGL.animationBuilder()&#10;                .duration(Duration.seconds(0.2))&#10;                .onFinished(&#10;                        () -&gt; {&#10;                            rootPane.setVisible(true);&#10;                            rootPane.toFront();&#10;                        })&#10;                .fadeIn(rootPane)&#10;                .buildAndPlay();&#10;    }&#10;&#10;    @Override&#10;    public void show(InputScreenData inputData) {&#10;&#10;        setData(inputData);&#10;        status = ScreenController.ScreenStatus.VISIBLE;&#10;        show();&#10;    }&#10;&#10;    @Override&#10;    public void hide() {&#10;&#10;        FXGL.animationBuilder()&#10;                .duration(Duration.seconds(0.2))&#10;                .onFinished(&#10;                        () -&gt; {&#10;                            rootPane.setVisible(false);&#10;                            status = ScreenStatus.HIDDEN;&#10;                        })&#10;                .fadeOut(rootPane)&#10;                .buildAndPlay();&#10;    }&#10;&#10;&#10;    @Override&#10;    public boolean isVisible() {&#10;        return rootPane.isVisible();&#10;    }&#10;&#10;    @Override&#10;    public boolean isHidden() {&#10;        return !rootPane.isVisible();&#10;    }&#10;&#10;    @Override&#10;    public Pane getRootPane() {&#10;        return rootPane;&#10;    }&#10;&#10;    @Override&#10;    public ScreenStatus getStatus() {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public boolean isInitialized() {&#10;&#10;        return status == ScreenController.ScreenStatus.INITIALIZED;&#10;    }&#10;&#10;    protected void setExerciseResultViewInputScreenData(ExerciseResultViewInputScreenData exerciseResultViewInputScreenData) {&#10;&#10;        this.exerciseResultViewInputScreenData = exerciseResultViewInputScreenData;&#10;    }&#10;&#10;    protected ExerciseResultViewInputScreenData getExerciseResultViewInputScreenData() {&#10;&#10;        return exerciseResultViewInputScreenData;&#10;    }&#10;&#10;    @FXML&#10;    void buttonAction(ActionEvent event) {&#10;&#10;        if (event.getSource() == btOk) {&#10;&#10;            hide();&#10;        }&#10;&#10;    }&#10;&#10;    /**&#10;     * Show stars progressively based on the percentage&#10;     * @param percent percentage of stars to show&#10;     */&#10;    private void showStarsProgressively(double percent) {&#10;&#10;        int starsToShow = (int) Math.round((percent / 100.0) * 6);&#10;        List&lt;ImageView&gt; stars = Arrays.asList(imgStar1, imgStar2, imgStar3, imgStar4, imgStar5, imgStar6);&#10;        stars.forEach(star -&gt; star.setImage(new Image(&quot;com/davidp/chessjourney/img-gray/stars_48dp_gray.png&quot;)));&#10;&#10;        // Show stars progressively&#10;        for (int i = 0; i &lt; starsToShow; i++) {&#10;            int starIndex = i;&#10;            JavaFXGameTimerUtil.runLoop(&#10;                    () -&gt; {&#10;                        stars.get(starIndex).setImage(new Image(&quot;com/davidp/chessjourney/img-gray/stars_48dp_purple.png&quot;));&#10;                        runLater(() -&gt; soundService.playSound(SoundServiceFactory.SoundType.SUCCEED_EXERCISE));&#10;                    },&#10;                    Duration.millis(400 * (i + 1))&#10;            );&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/util/JavaFXGameTimerUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/davidp/chessjourney/application/util/JavaFXGameTimerUtil.java" />
              <option name="originalContent" value="package com.davidp.chessjourney.application.util;&#10;&#10;import javafx.animation.Animation;&#10;import javafx.animation.KeyFrame;&#10;import javafx.util.Duration;&#10;&#10;    public static void runLoop(Runnable action, Duration interval) {&#10;        Timeline timeline = new Timeline(new KeyFrame(interval, e -&gt; action.run()));&#10;        timeline.setCycleCount(Timeline.INDEFINITE);&#10;        timeline.play();&#10;        addTimer(timeline);&#10;    }&#10;}&#10;import java.util.List;&#10;&#10;public class JavaFXGameTimerUtil {&#10;    private static final List&lt;Animation&gt; activeTimers = new ArrayList&lt;&gt;();&#10;&#10;    public static void addTimer(Animation timer) {&#10;        activeTimers.add(timer);&#10;    }&#10;&#10;    public static void clear() {&#10;        for (Animation timer : activeTimers) {&#10;            timer.stop();&#10;        }&#10;        activeTimers.clear();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.davidp.chessjourney.application.util;&#10;&#10;import javafx.animation.Animation;&#10;import javafx.animation.KeyFrame;&#10;import javafx.animation.Timeline;&#10;import javafx.util.Duration;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class JavaFXGameTimerUtil {&#10;    private static final List&lt;Animation&gt; activeTimers = new ArrayList&lt;&gt;();&#10;&#10;    public static void runLoop(Runnable action, Duration interval) {&#10;        Timeline timeline = new Timeline(new KeyFrame(interval, e -&gt; action.run()));&#10;        timeline.setCycleCount(Timeline.INDEFINITE);&#10;        timeline.play();&#10;        addTimer(timeline);&#10;    }&#10;&#10;    public static void addTimer(Animation timer) {&#10;        activeTimers.add(timer);&#10;    }&#10;&#10;    public static void clear() {&#10;        for (Animation timer : activeTimers) {&#10;            timer.stop();&#10;        }&#10;        activeTimers.clear();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>